<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>读重构</title>
    <link href="/2023/09/13/reading-reconstruction/"/>
    <url>/2023/09/13/reading-reconstruction/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章"><a href="#第1章" class="headerlink" title="第1章"></a>第<strong>1</strong>章</h1><blockquote><p>谈原理，很容易流于泛泛，又很难说明如何实际应用。给出一个示例，就可以帮助我把事情认识清楚。</p></blockquote><p>作者一下就点出了只看原理的困境，读很多原理的文章时，当时有一种我懂了的感觉，但是又想不出它应该用在哪里, 实际遇到相似原理的时候又有一种之前只是略懂的感觉。</p><p>先给例子 在将原理 可能在加上一些拓展 可能认知会更清晰。</p><h2 id="1-1-起点"><a href="#1-1-起点" class="headerlink" title="1.1 起点"></a>1.1 起点</h2><p>例子：</p><p>设想有一个戏剧演出团，演员们经常要去各种场合表演戏剧。通常客户 (customer)会指定几出剧目，而剧团则根据观众(audience)人数及剧目类型来 向客户收费。该团目前出演两种戏剧:悲剧(tragedy)和喜剧(comedy)。给客 户发出账单时，剧团还会根据到场观众的数量给出“观众量积分”(volume credit)优惠，下次客户再请剧团表演时可以使用积分获得折扣——你可以把它看 作一种提升客户忠诚度的方式。</p><p>plays.json 该剧团将剧目的数据存储在一个简单的JSON文件中。</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;hamlet&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Hamlet&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tragedy&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;as-like&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;As You Like It&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;comedy&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;othello&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Othello&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tragedy&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>invoices.json 他们开出的账单也存储在一个JSON文件里。</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;customer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BigCo&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;performances&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>        <span class="hljs-punctuation">&#123;</span>            <span class="hljs-attr">&quot;playID&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hamlet&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;audience&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">55</span>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <span class="hljs-punctuation">&#123;</span>            <span class="hljs-attr">&quot;playID&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;as-like&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;audience&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">35</span>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <span class="hljs-punctuation">&#123;</span>            <span class="hljs-attr">&quot;playID&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;othello&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;audience&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">40</span>        <span class="hljs-punctuation">&#125;</span>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>打印账单详情</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">statement</span> (invoice, plays) &#123;    <span class="hljs-keyword">let</span> totalAmount = <span class="hljs-number">0</span>;    <span class="hljs-keyword">let</span> volumeCredits = <span class="hljs-number">0</span>;    <span class="hljs-keyword">let</span> result = <span class="hljs-string">`Statement for <span class="hljs-subst">$&#123;invoice.customer&#125;</span>\n`</span>;    <span class="hljs-keyword">const</span> format = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intl</span>.<span class="hljs-title class_">NumberFormat</span>(<span class="hljs-string">&quot;en-US&quot;</span>,                          &#123; <span class="hljs-attr">style</span>: <span class="hljs-string">&quot;currency&quot;</span>, <span class="hljs-attr">currency</span>: <span class="hljs-string">&quot;USD&quot;</span>,                            <span class="hljs-attr">minimumFractionDigits</span>: <span class="hljs-number">2</span> &#125;).<span class="hljs-property">format</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> perf <span class="hljs-keyword">of</span> invoice.<span class="hljs-property">performances</span>) &#123;      <span class="hljs-keyword">const</span> play = plays[perf.<span class="hljs-property">playID</span>];      <span class="hljs-keyword">let</span> thisAmount = <span class="hljs-number">0</span>;      <span class="hljs-keyword">switch</span> (play.<span class="hljs-property">type</span>) &#123;      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;tragedy&quot;</span>:        thisAmount = <span class="hljs-number">40000</span>;        <span class="hljs-keyword">if</span> (perf.<span class="hljs-property">audience</span> &gt; <span class="hljs-number">30</span>) &#123;          thisAmount += <span class="hljs-number">1000</span> * (perf.<span class="hljs-property">audience</span> - <span class="hljs-number">30</span>);        &#125;        <span class="hljs-keyword">break</span>;      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;comedy&quot;</span>:        thisAmount = <span class="hljs-number">30000</span>;        <span class="hljs-keyword">if</span> (perf.<span class="hljs-property">audience</span> &gt; <span class="hljs-number">20</span>) &#123;          thisAmount += <span class="hljs-number">10000</span> + <span class="hljs-number">500</span> * (perf.<span class="hljs-property">audience</span> - <span class="hljs-number">20</span>);        &#125;        thisAmount += <span class="hljs-number">300</span> * perf.<span class="hljs-property">audience</span>;        <span class="hljs-keyword">break</span>;      <span class="hljs-attr">default</span>:          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`unknown type: <span class="hljs-subst">$&#123;play.type&#125;</span>`</span>);      &#125;      <span class="hljs-comment">// add volume credits</span>      volumeCredits += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(perf.<span class="hljs-property">audience</span> - <span class="hljs-number">30</span>, <span class="hljs-number">0</span>);      <span class="hljs-comment">// add extra credit for every ten comedy attendees</span>      <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;comedy&quot;</span> === play.<span class="hljs-property">type</span>) volumeCredits += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(perf.<span class="hljs-property">audience</span> / <span class="hljs-number">5</span>);      <span class="hljs-comment">// print line for this order</span>      result += <span class="hljs-string">` <span class="hljs-subst">$&#123;play.name&#125;</span>: <span class="hljs-subst">$&#123;format(thisAmount/<span class="hljs-number">100</span>)&#125;</span> (<span class="hljs-subst">$&#123;perf.audience&#125;</span> seats)\n`</span>;      totalAmount += thisAmount;    &#125;    result += <span class="hljs-string">`Amount owed is <span class="hljs-subst">$&#123;format(totalAmount/<span class="hljs-number">100</span>)&#125;</span>\n`</span>;    result += <span class="hljs-string">`You earned <span class="hljs-subst">$&#123;volumeCredits&#125;</span> credits\n`</span>;    <span class="hljs-keyword">return</span> result;&#125;</code></pre></div><p>打印结果</p><div class="code-wrapper"><pre><code class="hljs json">Statement for BigCo Hamlet<span class="hljs-punctuation">:</span> $<span class="hljs-number">650.00</span> (<span class="hljs-number">55</span> seats) As You Like It<span class="hljs-punctuation">:</span> $<span class="hljs-number">580.00</span> (<span class="hljs-number">35</span> seats) Othello<span class="hljs-punctuation">:</span> $<span class="hljs-number">500.00</span> (<span class="hljs-number">40</span> seats)Amount owed is $<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">730.00</span>You earned <span class="hljs-number">47</span> credits</code></pre></div><p>评价:</p><p>代码组织不甚清晰!  当我们需要修改系统时，就<strong>涉及了人</strong>，而人在乎这些。<strong>差劲的系统是很难修改的</strong>，因为<strong>很难找到修改点</strong>，难以了解做出的修改 与现有代码如何协作实现我想要的行为。<strong>如果很难找到修改点，我就很有可能犯 错，从而引入bug</strong>。</p><p>可拓展性不高！当计费规则发生改变，积分规则计算出现变化，输出结果改变格式时 都需要读懂全部逻辑 并且修改原 statement 函数。作为 一个经验丰富的开发者，我可以肯定:<strong>不论最终提出什么方案，他们一定会在6 个月之内再次修改它</strong>。毕竟，需求通常不来则已，一来便会接踵而至。</p><p>结语：</p><p>是需求的变化使重构变得必要。如果一段代码能正常工作，<br>并且不会再被修改，那么完全可以不去重构它。能改进之当然很好，但若没人需<br>要去理解它，它就不会真正妨碍什么。如果确实有人需要理解它的工作原理，并<br>且觉得理解起来很费劲，那你就需要改进一下代码了。</p><h2 id="1-2-重构第一步"><a href="#1-2-重构第一步" class="headerlink" title="1.2 重构第一步"></a>1.2 重构第一步</h2><blockquote><p>重构前，先检查自己是否有一套可靠的测试集。这些测试必须有自我检验能力。</p></blockquote><p>每当我要进行重构的时候，第一个步骤永远相同:我得确保即将修改的代码 拥有一组可靠的测试。这些测试必不可少，因为尽管遵循重构手法可以使我避免 绝大多数引入bug的情形，但我毕竟是人，毕竟有可能犯错。程序越大，我的修 改不小心破坏其他代码的可能性就越大——在数字时代，软件的名字就是脆弱。</p><p>statement 函数的返回值是一个字符串，我做的就是创建几张新的账单 (invoice)，假设每张账单收取了几出戏剧的费用，然后使用这几张账单作为输 入调用statement函数，生成对应的对账单(statement)字符串。我会拿生成的字 符串与我已经手工检查过的字符串做比对。我会借助一个测试框架来配置好这些 测试，只要在开发环境中输入一行命令就可以把它们运行起来。运行这些测试只 需几秒钟，所以你会看到我经常运行它们。</p><p>测试过程中很重要的一部分，就是测试程序对于结果的报告方式。它们要么<br>变绿，表示所有新字符串都和参考字符串一样，要么就变红，然后列出失败清<br>单，显示问题字符串的出现行号。这些测试都能够自我检验。使测试能自我检验<br>至关重要，否则就得耗费大把时间来回比对，这会降低开发速度。现代的测试框<br>架都提供了丰富的设施，支持编写和运行能够自我检验的测试。</p><p>** 进行重构时，我需要依赖测试。我将测试视为bug检测器，它们能保护我不 被自己犯的错误所困扰。把我想要达成的目标写两遍——代码里写一遍，测试里 再写一遍——我就得犯两遍同样的错误才能骗过检测器。这降低了我犯错的概 率，因为我对工作进行了二次确认。尽管编写测试需要花费时间，但却为我节省 下可观的调试时间。</p><h2 id="1-3-分解-statement-函数"><a href="#1-3-分解-statement-函数" class="headerlink" title="1.3 分解 statement 函数"></a>1.3 分解 statement 函数</h2><blockquote><p>傻瓜都能写出计算机可以理解的代码。唯有能写出人类容易理解的代码的，才是优秀的程序员。</p></blockquote><p>首先要明确的是一段好的代码，<strong>一眼望过去我就该知道它在做什么</strong>，回头看时，代码就能告诉我它在干什么，<strong>我不需要重新思考一遍</strong>。</p><h3 id="1-3-1-抽离函数"><a href="#1-3-1-抽离函数" class="headerlink" title="1.3.1 抽离函数"></a>1.3.1 抽离函数</h3><p>首先最让人难懂的逻辑就是 switch 中计算金额的逻辑。我们要将他抽离出去，</p><p>如何抽离呢？</p><p>先将这块代码抽取成一个独立的函数，按它所干的事情给它命名，比如叫amountFor(performance)，</p><p>如何将这块代码提炼到自己的一个函数里？</p><p><strong>首先要判断有哪些变量会离开原本的作用域</strong>，在此示例中，是perf、play和thisAmount这3个变量。前两个变量会被提炼后的函数使用，但不会被修改，那么我就可以将它们以参数方式传递进来。<strong>我更关心那些会被修改的变量</strong>。这里只有唯一一个 ——thisAmount，<u>因此可以将它从函数中直接返回，我还可以将其初始化放到提 炼后的函数里</u>。修改后的代码如下所示。</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">statement</span> (invoice, plays) &#123;    <span class="hljs-keyword">let</span> totalAmount = <span class="hljs-number">0</span>;    <span class="hljs-keyword">let</span> volumeCredits = <span class="hljs-number">0</span>;    <span class="hljs-keyword">let</span> result = <span class="hljs-string">`Statement for <span class="hljs-subst">$&#123;invoice.customer&#125;</span>\n`</span>;    <span class="hljs-comment">// 格式化钱</span>    <span class="hljs-keyword">const</span> format = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intl</span>.<span class="hljs-title class_">NumberFormat</span>(<span class="hljs-string">&quot;en-US&quot;</span>,                          &#123; <span class="hljs-attr">style</span>: <span class="hljs-string">&quot;currency&quot;</span>, <span class="hljs-attr">currency</span>: <span class="hljs-string">&quot;USD&quot;</span>,                            <span class="hljs-attr">minimumFractionDigits</span>: <span class="hljs-number">2</span> &#125;).<span class="hljs-property">format</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> perf <span class="hljs-keyword">of</span> invoice.<span class="hljs-property">performances</span>) &#123;      <span class="hljs-keyword">const</span> play = plays[perf.<span class="hljs-property">playID</span>];      <span class="hljs-keyword">let</span> thisAmount = <span class="hljs-title function_">amountFor</span>(perf, play);      <span class="hljs-comment">// add volume credits</span>      volumeCredits += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(perf.<span class="hljs-property">audience</span> - <span class="hljs-number">30</span>, <span class="hljs-number">0</span>);      <span class="hljs-comment">// add extra credit for every ten comedy attendees</span>      <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;comedy&quot;</span> === play.<span class="hljs-property">type</span>) volumeCredits += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(perf.<span class="hljs-property">audience</span> / <span class="hljs-number">5</span>);      <span class="hljs-comment">// print line for this order</span>      result += <span class="hljs-string">` <span class="hljs-subst">$&#123;play.name&#125;</span>: <span class="hljs-subst">$&#123;format(thisAmount/<span class="hljs-number">100</span>)&#125;</span> (<span class="hljs-subst">$&#123;perf.audience&#125;</span> seats)\n`</span>;      totalAmount += thisAmount;    &#125;    result += <span class="hljs-string">`Amount owed is <span class="hljs-subst">$&#123;format(totalAmount/<span class="hljs-number">100</span>)&#125;</span>\n`</span>;    result += <span class="hljs-string">`You earned <span class="hljs-subst">$&#123;volumeCredits&#125;</span> credits\n`</span>;    <span class="hljs-keyword">return</span> result;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">amountFor</span>(<span class="hljs-params">perf, play</span>) &#123;  <span class="hljs-keyword">let</span> thisAmount = <span class="hljs-number">0</span>;  <span class="hljs-keyword">switch</span> (play.<span class="hljs-property">type</span>) &#123;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;tragedy&quot;</span>:    thisAmount = <span class="hljs-number">40000</span>;    <span class="hljs-keyword">if</span> (perf.<span class="hljs-property">audience</span> &gt; <span class="hljs-number">30</span>) &#123;      thisAmount += <span class="hljs-number">1000</span> * (perf.<span class="hljs-property">audience</span> - <span class="hljs-number">30</span>);    &#125;    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;comedy&quot;</span>:    thisAmount = <span class="hljs-number">30000</span>;    <span class="hljs-keyword">if</span> (perf.<span class="hljs-property">audience</span> &gt; <span class="hljs-number">20</span>) &#123;      thisAmount += <span class="hljs-number">10000</span> + <span class="hljs-number">500</span> * (perf.<span class="hljs-property">audience</span> - <span class="hljs-number">20</span>);    &#125;    thisAmount += <span class="hljs-number">300</span> * perf.<span class="hljs-property">audience</span>;    <span class="hljs-keyword">break</span>;  <span class="hljs-attr">default</span>:      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`unknown type: <span class="hljs-subst">$&#123;play.type&#125;</span>`</span>);  &#125;  <span class="hljs-keyword">return</span> thisAmount;&#125;</code></pre></div><p>改写之后要立马进行测试一遍，以确定我们的修改有效而不会带来其他不可预见的问题。如果重构时思如泉涌，写到最后进行测试，可能中间某一个步骤出现了问题就需要把重构的每一步都进行检测，难以查找，有时还会出现重构方向产生偏差，需要对中间以及偏后的代码重新编写。</p><p>重构过程的精髓所在:<strong>小步修改，每次修改后就运行测试</strong>。如果我 改动了太多东西，犯错时就可能陷入麻烦的调试，并为此耗费大把时间。小步修改，以及它带来的频繁反馈，正是防止混乱的关键。</p><blockquote><p>重构技术就是以微小的步伐修改程序。如果你犯下错误，很容易便可 发现它。</p></blockquote><p>测试通过后，我会将代码推送到 git 上，以便接下来的修改不会影响上一段的代码，下一段重构做的不好以及思绪混乱时，直接切回上次提交极为有用。</p><h3 id="1-3-2-修改变量名"><a href="#1-3-2-修改变量名" class="headerlink" title="1.3.2 修改变量名 **"></a>1.3.2 修改变量名 **</h3><blockquote><p>好代码应能清楚地表明它在做什么，而变量命名是代码清晰的关键</p></blockquote><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">amountFor</span>(<span class="hljs-params">aPerformance, play</span>) &#123;  <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;  <span class="hljs-keyword">switch</span> (play.<span class="hljs-property">type</span>) &#123;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;tragedy&quot;</span>:    result = <span class="hljs-number">40000</span>;    <span class="hljs-keyword">if</span> (perf.<span class="hljs-property">audience</span> &gt; <span class="hljs-number">30</span>) &#123;      result += <span class="hljs-number">1000</span> * (perf.<span class="hljs-property">audience</span> - <span class="hljs-number">30</span>);    &#125;    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;comedy&quot;</span>:    result = <span class="hljs-number">30000</span>;    <span class="hljs-keyword">if</span> (perf.<span class="hljs-property">audience</span> &gt; <span class="hljs-number">20</span>) &#123;      result += <span class="hljs-number">10000</span> + <span class="hljs-number">500</span> * (perf.<span class="hljs-property">audience</span> - <span class="hljs-number">20</span>);    &#125;    result += <span class="hljs-number">300</span> * perf.<span class="hljs-property">audience</span>;    <span class="hljs-keyword">break</span>;  <span class="hljs-attr">default</span>:      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`unknown type: <span class="hljs-subst">$&#123;play.type&#125;</span>`</span>);  &#125;  <span class="hljs-keyword">return</span> result;&#125;</code></pre></div><p>作者的风格:</p><ul><li><p>永远将函数的返回值命名为“result”，这样我一眼就 能知道它的作用。</p><p>– 我觉得可以作为一个标准。当然我也觉得写 amount 也没什么错。</p></li><li><p>使用一门动态类型语言(如JavaScript)时，跟踪 变量的类型很有意义。因此，我为参数取名时都默认带上其类型名。一般我会使 用不定冠词修饰它，除非命名中另有解释其角色的相关信息。(aPerformance)</p><p>– iOS 程序员自始至终都是如此 明知道是什么类型写变量名的时候也会带上相关的类型 如：amountNumber 这样阅读起来更顺畅，但是时常也会觉得啰嗦。如果用了 ts 可以不加类型，单纯的 js 最好还是加上相应的类型，毕竟 js 太魔幻了。</p><p>– 不定冠词（the Indefinite Article），还有一种是零冠词（Zero Article）。不定冠词a (an)与数词one 同源，是”一个”的意思。a用于辅音音素前，一般读作e，而an则用于元音音素前，一般读做an。</p></li></ul><h3 id="1-3-3-移除局部变量"><a href="#1-3-3-移除局部变量" class="headerlink" title="1.3.3 移除局部变量"></a>1.3.3 移除局部变量</h3><p>观察 amountFor 函数时，我会看看它的参数都从哪里来，<u>play 变量是由 performance 变量计算得到的，因此根本没必要将它作为参数传入</u>，我可以在 amountFor 函数中重新计算得到它。当我分解一个长函数时，我喜欢将play这样的变量移除掉，<u>因为它们创建了很多具有局部作用域的临时变量，这会使提炼函数更加复杂</u>。这里我要使用的重构手法是<strong>以查询取代临时变量</strong></p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">playFor</span>(<span class="hljs-params">aPerformance</span>) &#123;<span class="hljs-keyword">return</span> plays[aPerformance.<span class="hljs-property">playID</span>];&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">statement</span> (invoice, plays) &#123;  <span class="hljs-keyword">let</span> totalAmount = <span class="hljs-number">0</span>;  <span class="hljs-keyword">let</span> volumeCredits = <span class="hljs-number">0</span>;  <span class="hljs-keyword">let</span> result = <span class="hljs-string">`Statement for <span class="hljs-subst">$&#123;invoice.customer&#125;</span>\n`</span>;  <span class="hljs-keyword">const</span> format = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intl</span>.<span class="hljs-title class_">NumberFormat</span>(<span class="hljs-string">&quot;en-US&quot;</span>,                        &#123; <span class="hljs-attr">style</span>: <span class="hljs-string">&quot;currency&quot;</span>, <span class="hljs-attr">currency</span>: <span class="hljs-string">&quot;USD&quot;</span>,                          <span class="hljs-attr">minimumFractionDigits</span>: <span class="hljs-number">2</span> &#125;).<span class="hljs-property">format</span>;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> perf <span class="hljs-keyword">of</span> invoice.<span class="hljs-property">performances</span>) &#123;    <span class="hljs-keyword">const</span> play = <span class="hljs-title function_">playFor</span>(perf);    <span class="hljs-keyword">let</span> thisAmount = <span class="hljs-title function_">amountFor</span>(perf, play);    <span class="hljs-comment">// add volume credits</span>    volumeCredits += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(perf.<span class="hljs-property">audience</span> - <span class="hljs-number">30</span>, <span class="hljs-number">0</span>);    <span class="hljs-comment">// add extra credit for every ten comedy attendees</span>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;comedy&quot;</span> === play.<span class="hljs-property">type</span>) volumeCredits += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(perf.<span class="hljs-property">audience</span> / <span class="hljs-number">5</span>);    <span class="hljs-comment">// print line for this order</span>    result += <span class="hljs-string">` <span class="hljs-subst">$&#123;play.name&#125;</span>: <span class="hljs-subst">$&#123;format(thisAmount/<span class="hljs-number">100</span>)&#125;</span> (<span class="hljs-subst">$&#123;perf.audience&#125;</span> seats)\n`</span>;    totalAmount += thisAmount;  &#125;  result += <span class="hljs-string">`Amount owed is <span class="hljs-subst">$&#123;format(totalAmount/<span class="hljs-number">100</span>)&#125;</span>\n`</span>;  result += <span class="hljs-string">`You earned <span class="hljs-subst">$&#123;volumeCredits&#125;</span> credits\n`</span>;  <span class="hljs-keyword">return</span> result;&#125;<span class="hljs-comment">// tools</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">playFor</span>(<span class="hljs-params">aPerformance</span>) &#123;<span class="hljs-keyword">return</span> plays[aPerformance.<span class="hljs-property">playID</span>];&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">amountFor</span>(<span class="hljs-params">aPerformance, play</span>) &#123;  <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;  <span class="hljs-keyword">switch</span> (play.<span class="hljs-property">type</span>) &#123;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;tragedy&quot;</span>:    result = <span class="hljs-number">40000</span>;    <span class="hljs-keyword">if</span> (perf.<span class="hljs-property">audience</span> &gt; <span class="hljs-number">30</span>) &#123;      result += <span class="hljs-number">1000</span> * (perf.<span class="hljs-property">audience</span> - <span class="hljs-number">30</span>);    &#125;    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;comedy&quot;</span>:    result = <span class="hljs-number">30000</span>;    <span class="hljs-keyword">if</span> (perf.<span class="hljs-property">audience</span> &gt; <span class="hljs-number">20</span>) &#123;      result += <span class="hljs-number">10000</span> + <span class="hljs-number">500</span> * (perf.<span class="hljs-property">audience</span> - <span class="hljs-number">20</span>);    &#125;    result += <span class="hljs-number">300</span> * perf.<span class="hljs-property">audience</span>;    <span class="hljs-keyword">break</span>;  <span class="hljs-attr">default</span>:      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`unknown type: <span class="hljs-subst">$&#123;play.type&#125;</span>`</span>);  &#125;  <span class="hljs-keyword">return</span> result;&#125;</code></pre></div><p>编译、测试、最后将参数删除。</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">statement</span> (invoice, plays) &#123;  <span class="hljs-keyword">let</span> totalAmount = <span class="hljs-number">0</span>;  <span class="hljs-keyword">let</span> volumeCredits = <span class="hljs-number">0</span>;  <span class="hljs-keyword">let</span> result = <span class="hljs-string">`Statement for <span class="hljs-subst">$&#123;invoice.customer&#125;</span>\n`</span>;  <span class="hljs-keyword">const</span> format = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intl</span>.<span class="hljs-title class_">NumberFormat</span>(<span class="hljs-string">&quot;en-US&quot;</span>,                        &#123; <span class="hljs-attr">style</span>: <span class="hljs-string">&quot;currency&quot;</span>, <span class="hljs-attr">currency</span>: <span class="hljs-string">&quot;USD&quot;</span>,                          <span class="hljs-attr">minimumFractionDigits</span>: <span class="hljs-number">2</span> &#125;).<span class="hljs-property">format</span>;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> perf <span class="hljs-keyword">of</span> invoice.<span class="hljs-property">performances</span>) &#123;    <span class="hljs-keyword">let</span> thisAmount = <span class="hljs-title function_">amountFor</span>(perf);    <span class="hljs-comment">// add volume credits</span>    volumeCredits += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(perf.<span class="hljs-property">audience</span> - <span class="hljs-number">30</span>, <span class="hljs-number">0</span>);    <span class="hljs-comment">// add extra credit for every ten comedy attendees</span>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;comedy&quot;</span> === <span class="hljs-title function_">playFor</span>(perf).<span class="hljs-property">type</span>) volumeCredits += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(perf.<span class="hljs-property">audience</span> / <span class="hljs-number">5</span>);    <span class="hljs-comment">// print line for this order</span>    result += <span class="hljs-string">` <span class="hljs-subst">$&#123;playFor(perf).name&#125;</span>: <span class="hljs-subst">$&#123;format(thisAmount/<span class="hljs-number">100</span>)&#125;</span> (<span class="hljs-subst">$&#123;perf.audience&#125;</span> seats)\n`</span>;    totalAmount += thisAmount;  &#125;  result += <span class="hljs-string">`Amount owed is <span class="hljs-subst">$&#123;format(totalAmount/<span class="hljs-number">100</span>)&#125;</span>\n`</span>;  result += <span class="hljs-string">`You earned <span class="hljs-subst">$&#123;volumeCredits&#125;</span> credits\n`</span>;  <span class="hljs-keyword">return</span> result;&#125;<span class="hljs-comment">// tools</span>unction <span class="hljs-title function_">amountFor</span>(<span class="hljs-params">aPerformance</span>) &#123;  <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;  <span class="hljs-keyword">switch</span> (<span class="hljs-title function_">playFor</span>(aPerformance).<span class="hljs-property">type</span>) &#123;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;tragedy&quot;</span>:    result = <span class="hljs-number">40000</span>;    <span class="hljs-keyword">if</span> (aPerformance.<span class="hljs-property">audience</span> &gt; <span class="hljs-number">30</span>) &#123;      result += <span class="hljs-number">1000</span> * (aPerformance.<span class="hljs-property">audience</span> - <span class="hljs-number">30</span>);    &#125;    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;comedy&quot;</span>:    result = <span class="hljs-number">30000</span>;    <span class="hljs-keyword">if</span> (aPerformance.<span class="hljs-property">audience</span> &gt; <span class="hljs-number">20</span>) &#123;      result += <span class="hljs-number">10000</span> + <span class="hljs-number">500</span> * (aPerformance.<span class="hljs-property">audience</span> - <span class="hljs-number">20</span>);    &#125;    result += <span class="hljs-number">300</span> * aPerformance.<span class="hljs-property">audience</span>;    <span class="hljs-keyword">break</span>;  <span class="hljs-attr">default</span>:      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`unknown type: <span class="hljs-subst">$&#123;playFor(aPerformance).type&#125;</span>`</span>);  &#125;  <span class="hljs-keyword">return</span> result;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">playFor</span>(<span class="hljs-params">aPerformance</span>) &#123;<span class="hljs-keyword">return</span> plays[aPerformance.<span class="hljs-property">playID</span>];&#125;</code></pre></div><p>这次重构可能在一些程序员心中敲响警钟:重构前，查找play变量的代码在 每次循环中只执行了1次，而重构后却执行了3次。我会在后面探讨重构与性能之间的关系，但现在，我认为这次改动还不太可能对性能有严重影响，即便真的有 所影响，后续再对一段结构良好的代码进行性能调优，也容易得多。</p><p>移除局部变量的好处就是做提炼时会简单得多，因为需要操心的局部作用域<br>变少了。实际上，在做任何提炼前，我一般都会先移除局部变量。</p><hr><p>按照之前的方法一次提取观众量积分逻辑</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">statement</span> (invoice, plays) &#123;  <span class="hljs-keyword">let</span> totalAmount = <span class="hljs-number">0</span>;  <span class="hljs-keyword">let</span> volumeCredits = <span class="hljs-number">0</span>;  <span class="hljs-keyword">let</span> result = <span class="hljs-string">`Statement for <span class="hljs-subst">$&#123;invoice.customer&#125;</span>\n`</span>;  <span class="hljs-keyword">const</span> format = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intl</span>.<span class="hljs-title class_">NumberFormat</span>(<span class="hljs-string">&quot;en-US&quot;</span>,                        &#123; <span class="hljs-attr">style</span>: <span class="hljs-string">&quot;currency&quot;</span>, <span class="hljs-attr">currency</span>: <span class="hljs-string">&quot;USD&quot;</span>,                          <span class="hljs-attr">minimumFractionDigits</span>: <span class="hljs-number">2</span> &#125;).<span class="hljs-property">format</span>;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> perf <span class="hljs-keyword">of</span> invoice.<span class="hljs-property">performances</span>) &#123;    volumeCredits += <span class="hljs-title function_">volumeCreditsFor</span>(perf);    <span class="hljs-comment">// print line for this order</span>    result += <span class="hljs-string">` <span class="hljs-subst">$&#123;playFor(perf).name&#125;</span>: <span class="hljs-subst">$&#123;format(amountFor(perf)/<span class="hljs-number">100</span>)&#125;</span> (<span class="hljs-subst">$&#123;perf.audience&#125;</span> seats)</span><span class="hljs-string">\n`</span>;    totalAmount += <span class="hljs-title function_">amountFor</span>(perf);  &#125;  result += <span class="hljs-string">`Amount owed is <span class="hljs-subst">$&#123;format(totalAmount/<span class="hljs-number">100</span>)&#125;</span>\n`</span>;  result += <span class="hljs-string">`You earned <span class="hljs-subst">$&#123;volumeCredits&#125;</span> credits\n`</span>;  <span class="hljs-keyword">return</span> result;&#125;<span class="hljs-comment">// tools</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">amountFor</span>(<span class="hljs-params">aPerformance</span>) &#123;  <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;  <span class="hljs-keyword">switch</span> (<span class="hljs-title function_">playFor</span>(aPerformance).<span class="hljs-property">type</span>) &#123;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;tragedy&quot;</span>:    result = <span class="hljs-number">40000</span>;    <span class="hljs-keyword">if</span> (aPerformance.<span class="hljs-property">audience</span> &gt; <span class="hljs-number">30</span>) &#123;      result += <span class="hljs-number">1000</span> * (aPerformance.<span class="hljs-property">audience</span> - <span class="hljs-number">30</span>);    &#125;    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;comedy&quot;</span>:    result = <span class="hljs-number">30000</span>;    <span class="hljs-keyword">if</span> (aPerformance.<span class="hljs-property">audience</span> &gt; <span class="hljs-number">20</span>) &#123;      result += <span class="hljs-number">10000</span> + <span class="hljs-number">500</span> * (aPerformance.<span class="hljs-property">audience</span> - <span class="hljs-number">20</span>);    &#125;    result += <span class="hljs-number">300</span> * aPerformance.<span class="hljs-property">audience</span>;    <span class="hljs-keyword">break</span>;  <span class="hljs-attr">default</span>:      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`unknown type: <span class="hljs-subst">$&#123;playFor(aPerformance).type&#125;</span>`</span>);  &#125;  <span class="hljs-keyword">return</span> result;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">volumeCreditsFor</span>(<span class="hljs-params">aPerformance</span>) &#123;  <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;  result += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(aPerformance.<span class="hljs-property">audience</span> - <span class="hljs-number">30</span>, <span class="hljs-number">0</span>);  <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;comedy&quot;</span> === <span class="hljs-title function_">playFor</span>(aPerformance).<span class="hljs-property">type</span>) result += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(aPerformance.<span class="hljs-property">audience</span> / <span class="hljs-number">5</span>);  <span class="hljs-keyword">return</span> result;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">playFor</span>(<span class="hljs-params">aPerformance</span>) &#123;<span class="hljs-keyword">return</span> plays[aPerformance.<span class="hljs-property">playID</span>];&#125;</code></pre></div><h3 id="1-3-4-临时变量替换为一个明确声明的函数-弱"><a href="#1-3-4-临时变量替换为一个明确声明的函数-弱" class="headerlink" title="1.3.4 临时变量替换为一个明确声明的函数 - 弱"></a>1.3.4 临时变量替换为一个明确声明的函数 - 弱</h3><p>正如上面所指出的，临时变量往往会带来麻烦。你需要明确的知道变量代表的意思，你会不自觉地阅读 format 后面的实现，这有一种打断了整体阅读的连续感。</p><p>它们只在对其进行处理的代码块中有用，因此临时变量实质上是鼓励你写长而复杂的函数。下一步我要替换掉一些临时变量，而最简单的莫过于从format变量入手。<strong>这是典型 的“将函数赋值给临时变量”的场景，我更愿意将其替换为一个明确声明的函数。</strong></p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">statement</span> (invoice, plays) &#123;  <span class="hljs-keyword">let</span> totalAmount = <span class="hljs-number">0</span>;  <span class="hljs-keyword">let</span> volumeCredits = <span class="hljs-number">0</span>;  <span class="hljs-keyword">let</span> result = <span class="hljs-string">`Statement for <span class="hljs-subst">$&#123;invoice.customer&#125;</span>\n`</span>;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> perf <span class="hljs-keyword">of</span> invoice.<span class="hljs-property">performances</span>) &#123;    volumeCredits += <span class="hljs-title function_">volumeCreditsFor</span>(perf);    <span class="hljs-comment">// print line for this order</span>    result += <span class="hljs-string">` <span class="hljs-subst">$&#123;playFor(perf).name&#125;</span>: <span class="hljs-subst">$&#123;format(amountFor(perf)/<span class="hljs-number">100</span>)&#125;</span> (<span class="hljs-subst">$&#123;perf.audience&#125;</span> seats)</span><span class="hljs-string">\n`</span>;    totalAmount += <span class="hljs-title function_">amountFor</span>(perf);  &#125;  result += <span class="hljs-string">`Amount owed is <span class="hljs-subst">$&#123;format(totalAmount/<span class="hljs-number">100</span>)&#125;</span>\n`</span>;  result += <span class="hljs-string">`You earned <span class="hljs-subst">$&#123;volumeCredits&#125;</span> credits\n`</span>;  <span class="hljs-keyword">return</span> result;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// tools</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">amountFor</span>(<span class="hljs-params">aPerformance</span>) &#123;  <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;  <span class="hljs-keyword">switch</span> (<span class="hljs-title function_">playFor</span>(aPerformance).<span class="hljs-property">type</span>) &#123;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;tragedy&quot;</span>:    result = <span class="hljs-number">40000</span>;    <span class="hljs-keyword">if</span> (aPerformance.<span class="hljs-property">audience</span> &gt; <span class="hljs-number">30</span>) &#123;      result += <span class="hljs-number">1000</span> * (aPerformance.<span class="hljs-property">audience</span> - <span class="hljs-number">30</span>);    &#125;    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;comedy&quot;</span>:    result = <span class="hljs-number">30000</span>;    <span class="hljs-keyword">if</span> (aPerformance.<span class="hljs-property">audience</span> &gt; <span class="hljs-number">20</span>) &#123;      result += <span class="hljs-number">10000</span> + <span class="hljs-number">500</span> * (aPerformance.<span class="hljs-property">audience</span> - <span class="hljs-number">20</span>);    &#125;    result += <span class="hljs-number">300</span> * aPerformance.<span class="hljs-property">audience</span>;    <span class="hljs-keyword">break</span>;  <span class="hljs-attr">default</span>:      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`unknown type: <span class="hljs-subst">$&#123;playFor(aPerformance).type&#125;</span>`</span>);  &#125;  <span class="hljs-keyword">return</span> result;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">volumeCreditsFor</span>(<span class="hljs-params">aPerformance</span>) &#123;  <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;  result += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(aPerformance.<span class="hljs-property">audience</span> - <span class="hljs-number">30</span>, <span class="hljs-number">0</span>);  <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;comedy&quot;</span> === <span class="hljs-title function_">playFor</span>(aPerformance).<span class="hljs-property">type</span>) result += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(aPerformance.<span class="hljs-property">audience</span> / <span class="hljs-number">5</span>);  <span class="hljs-keyword">return</span> result;&#125;<span class="hljs-comment">// new</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">format</span>(<span class="hljs-params">aNumber</span>) &#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intl</span>.<span class="hljs-title class_">NumberFormat</span>(<span class="hljs-string">&quot;en-US&quot;</span>,                        &#123; <span class="hljs-attr">style</span>: <span class="hljs-string">&quot;currency&quot;</span>, <span class="hljs-attr">currency</span>: <span class="hljs-string">&quot;USD&quot;</span>,                          <span class="hljs-attr">minimumFractionDigits</span>: <span class="hljs-number">2</span> &#125;).<span class="hljs-property">format</span>;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">playFor</span>(<span class="hljs-params">aPerformance</span>) &#123;<span class="hljs-keyword">return</span> plays[aPerformance.<span class="hljs-property">playID</span>];&#125;</code></pre></div><p>尽管将函数变量改变成函数声明也是一种重构手法，但我既未为此手法命<br> 名，也未将它纳入重构名录。还有很多的重构手法我都觉得没那么重要。我觉<br> 得上面这个函数改名的手法既十分简单又不太常用，不值得在重构名录中占有<br> 一席之地。</p><p>我对提炼得到的函数名称不很满意——format未能清晰地描述其作 用。formatAsUSD很表意，但又太长，特别它仅是小范围地被用在一个字符串模板 中。我认为这里真正需要强调的是，它格式化的是一个货币数字，因此我选取了 一个能体现此意图的命名，并应用了改变函数声明手法。</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">usd</span>(<span class="hljs-params">aNumber</span>) &#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intl</span>.<span class="hljs-title class_">NumberFormat</span>(<span class="hljs-string">&quot;en-US&quot;</span>,                        &#123; <span class="hljs-attr">style</span>: <span class="hljs-string">&quot;currency&quot;</span>, <span class="hljs-attr">currency</span>: <span class="hljs-string">&quot;USD&quot;</span>,                          <span class="hljs-attr">minimumFractionDigits</span>: <span class="hljs-number">2</span> &#125;).<span class="hljs-property">format</span>;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>重构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>重构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript 学习</title>
    <link href="/2023/09/09/typescript/"/>
    <url>/2023/09/09/typescript/</url>
    
    <content type="html"><![CDATA[<p>记录一些学习的 TS 语法。学习内容来自 <a href="https://wangdoc.com/typescript/">阮一峰</a></p><h2 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h2><p>TypeScript 规定，单个值也是一种类型，称为“值类型”。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>:<span class="hljs-string">&#x27;hello&#x27;</span>;x = <span class="hljs-string">&#x27;hello&#x27;</span>; <span class="hljs-comment">// 正确</span>x = <span class="hljs-string">&#x27;world&#x27;</span>; <span class="hljs-comment">// 报错</span></code></pre></div><p>上面示例中，变量<code>x</code>的类型是字符串<code>hello</code>，导致它只能赋值为这个字符串，赋值为其他字符串就会报错。</p><p>TypeScript 推断类型时，遇到<code>const</code>命令声明的变量，如果代码里面没有注明类型，就会推断该变量是值类型。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// x 的类型是 &quot;https&quot;</span><span class="hljs-keyword">const</span> x = <span class="hljs-string">&#x27;https&#x27;</span>;<span class="hljs-comment">// y 的类型是 string</span><span class="hljs-keyword">const</span> <span class="hljs-attr">y</span>:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;https&#x27;</span>;</code></pre></div><p>上面示例中，变量<code>x</code>是<code>const</code>命令声明的，TypeScript 就会推断它的类型是值<code>https</code>，而不是<code>string</code>类型。</p><p>这样推断是合理的，因为<code>const</code>命令声明的变量，一旦声明就不能改变，相当于常量。值类型就意味着不能赋为其他值。</p><p>注意，<code>const</code>命令声明的变量，如果赋值为对象，并不会推断为值类型。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// x 的类型是 &#123; foo: number &#125;</span><span class="hljs-keyword">const</span> x = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-number">1</span> &#125;;</code></pre></div><p>值类型可能会出现一些很奇怪的报错。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">x</span>:<span class="hljs-number">5</span> = <span class="hljs-number">4</span> + <span class="hljs-number">1</span>; <span class="hljs-comment">// 报错</span></code></pre></div><p>上面示例中，等号左侧的类型是数值<code>5</code>，等号右侧<code>4 + 1</code>的类型，TypeScript 推测为<code>number</code>。由于<code>5</code>是<code>number</code>的子类型，<code>number</code>是<code>5</code>的父类型，父类型不能赋值给子类型，所以报错了</p><p>但是，反过来是可以的，子类型可以赋值给父类型。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>:<span class="hljs-number">5</span> = <span class="hljs-number">5</span>;<span class="hljs-keyword">let</span> <span class="hljs-attr">y</span>:<span class="hljs-built_in">number</span> = <span class="hljs-number">4</span> + <span class="hljs-number">1</span>;x = y; <span class="hljs-comment">// 报错</span>y = x; <span class="hljs-comment">// 正确</span></code></pre></div><p>如果一定要让子类型可以赋值为父类型的值，就要用到类型断言</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">x</span>:<span class="hljs-number">5</span> = (<span class="hljs-number">4</span> + <span class="hljs-number">1</span>) <span class="hljs-keyword">as</span> <span class="hljs-number">5</span>; <span class="hljs-comment">// 正确</span></code></pre></div><h2 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h2><p>交叉类型（intersection types）指的多个类型组成的一个新类型，使用符号<code>&amp;</code>表示。</p><p>交叉类型<code>A&amp;B</code>表示，任何一个类型必须同时属于<code>A</code>和<code>B</code>，才属于交叉类型<code>A&amp;B</code>，即交叉类型同时满足<code>A</code>和<code>B</code>的特征。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>:<span class="hljs-built_in">number</span>&amp;<span class="hljs-built_in">string</span>;</code></pre></div><p>上面示例中，变量<code>x</code>同时是数值和字符串，这当然是不可能的，所以 TypeScript 会认为<code>x</code>的类型实际是<code>never</code>。</p><p>交叉类型的主要用途是表示对象的合成。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">let</span> <span class="hljs-attr">obj</span>:  &#123; <span class="hljs-attr">foo</span>: <span class="hljs-built_in">string</span> &#125; &amp;  &#123; <span class="hljs-attr">bar</span>: <span class="hljs-built_in">string</span> &#125;;obj = &#123;  <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,  <span class="hljs-attr">bar</span>: <span class="hljs-string">&#x27;world&#x27;</span>&#125;;</code></pre></div><p>上面示例中，变量<code>obj</code>同时具有属性<code>foo</code>和属性<code>bar</code>。</p><p>交叉类型常常用来为对象类型添加新属性。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> A = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-built_in">number</span> &#125;;<span class="hljs-keyword">type</span> B = A &amp; &#123; <span class="hljs-attr">bar</span>: <span class="hljs-built_in">number</span> &#125;;</code></pre></div><p>上面示例中，类型<code>B</code>是一个交叉类型，用来在<code>A</code>的基础上增加了属性<code>bar</code>。</p><h2 id="type-命令"><a href="#type-命令" class="headerlink" title="type 命令"></a>type 命令</h2><p><code>type</code>命令用来定义一个类型的别名。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Age</span> = <span class="hljs-built_in">number</span>;<span class="hljs-keyword">let</span> <span class="hljs-attr">age</span>:<span class="hljs-title class_">Age</span> = <span class="hljs-number">55</span>;</code></pre></div><p>上面示例中，<code>type</code>命令为<code>number</code>类型定义了一个别名<code>Age</code>。这样就能像使用<code>number</code>一样，使用<code>Age</code>作为类型。</p><p>别名可以让类型的名字变得更有意义，也能增加代码的可读性，还可以使复杂类型用起来更方便，便于以后修改变量的类型。</p><p>别名不允许重名。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Color</span> = <span class="hljs-string">&#x27;red&#x27;</span>;<span class="hljs-keyword">type</span> <span class="hljs-title class_">Color</span> = <span class="hljs-string">&#x27;blue&#x27;</span>; <span class="hljs-comment">// 报错</span></code></pre></div><p>上面示例中，同一个别名<code>Color</code>声明了两次，就报错了。</p><p>别名的作用域是块级作用域。这意味着，代码块内部定义的别名，影响不到外部。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Color</span> = <span class="hljs-string">&#x27;red&#x27;</span>;<span class="hljs-keyword">if</span> (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &lt; <span class="hljs-number">0.5</span>) &#123;  <span class="hljs-keyword">type</span> <span class="hljs-title class_">Color</span> = <span class="hljs-string">&#x27;blue&#x27;</span>;&#125;</code></pre></div><p>上面示例中，<code>if</code>代码块内部的类型别名<code>Color</code>，跟外部的<code>Color</code>是不一样的。</p><p>别名支持使用表达式，也可以在定义一个别名时，使用另一个别名，即别名允许嵌套。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">World</span> = <span class="hljs-string">&quot;world&quot;</span>;<span class="hljs-keyword">type</span> <span class="hljs-title class_">Greeting</span> = <span class="hljs-string">`hello <span class="hljs-subst">$&#123;World&#125;</span>`</span>;</code></pre></div><p>上面示例中，别名<code>Greeting</code>使用了模板字符串，读取另一个别名<code>World</code>。</p><p><code>type</code>命令属于类型相关的代码，编译成 JavaScript 的时候，会被全部删除。</p><h2 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h2><p>interface 可以使用<code>extends</code>关键字，继承其他 interface。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Shape</span> &#123;  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;&#125;<span class="hljs-keyword">interface</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;  <span class="hljs-attr">radius</span>: <span class="hljs-built_in">number</span>;&#125;</code></pre></div><p>interface 允许多重继承。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Style</span> &#123;  <span class="hljs-attr">color</span>: <span class="hljs-built_in">string</span>;&#125;<span class="hljs-keyword">interface</span> <span class="hljs-title class_">Shape</span> &#123;  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;&#125;<span class="hljs-keyword">interface</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Style</span>, <span class="hljs-title class_">Shape</span> &#123;  <span class="hljs-attr">radius</span>: <span class="hljs-built_in">number</span>;&#125;</code></pre></div><p>上面示例中，<code>Circle</code>同时继承了<code>Style</code>和<code>Shape</code>，所以拥有三个属性<code>color</code>、<code>name</code>和<code>radius</code>。</p><p>多重接口继承，实际上相当于多个父接口的合并。</p><p>interface 可以继承<code>type</code>命令定义的对象类型。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Country</span> = &#123;  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;  <span class="hljs-attr">capital</span>: <span class="hljs-built_in">string</span>;&#125;<span class="hljs-keyword">interface</span> <span class="hljs-title class_">CountryWithPop</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Country</span> &#123;  <span class="hljs-attr">population</span>: <span class="hljs-built_in">number</span>;&#125;</code></pre></div><p>上面示例中，<code>CountryWithPop</code>继承了<code>type</code>命令定义的<code>Country</code>对象，并且新增了一个<code>population</code>属性。</p><p>注意，如果<code>type</code>命令定义的类型不是对象，interface 就无法继承。</p><p>多个同名接口会合并成一个接口。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Box</span> &#123;  <span class="hljs-attr">height</span>: <span class="hljs-built_in">number</span>;  <span class="hljs-attr">width</span>: <span class="hljs-built_in">number</span>;&#125;<span class="hljs-keyword">interface</span> <span class="hljs-title class_">Box</span> &#123;  <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>;&#125;</code></pre></div><p>上面示例中，两个<code>Box</code>接口会合并成一个接口，同时有<code>height</code>、<code>width</code>和<code>length</code>三个属性。</p><h2 id="interface-与-type-的异同"><a href="#interface-与-type-的异同" class="headerlink" title="* interface 与 type 的异同"></a>* interface 与 type 的异同</h2><p><code>interface</code>命令与<code>type</code>命令作用类似，都可以表示对象类型。</p><p>很多对象类型既可以用 interface 表示，也可以用 type 表示。而且，两者往往可以换用，几乎所有的 interface 命令都可以改写为 type 命令。</p><p>它们的相似之处，首先表现在都能为对象类型起名。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Country</span> = &#123;  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;  <span class="hljs-attr">capital</span>: <span class="hljs-built_in">string</span>;&#125;<span class="hljs-keyword">interface</span> <span class="hljs-title class_">Coutry</span> &#123;  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;  <span class="hljs-attr">capital</span>: <span class="hljs-built_in">string</span>;&#125;</code></pre></div><p>上面示例是<code>type</code>命令和<code>interface</code>命令，分别定义同一个类型。</p><p><code>class</code>命令也有类似作用，通过定义一个类，同时定义一个对象类型。但是，它会创造一个值，编译后依然存在。如果只是单纯想要一个类型，应该使用<code>type</code>或<code>interface</code>。</p><p>interface 与 type 的区别有下面几点。</p><p>（1）<code>type</code>能够表示非对象类型，而<code>interface</code>只能表示对象类型（包括数组、函数等）。</p><p>（2）<code>interface</code>可以继承其他类型，<code>type</code>不支持继承。</p><p>继承的主要作用是添加属性，<code>type</code>定义的对象类型如果想要添加属性，只能使用<code>&amp;</code>运算符，重新定义一个类型。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Animal</span> = &#123;  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>&#125;<span class="hljs-keyword">type</span> <span class="hljs-title class_">Bear</span> = <span class="hljs-title class_">Animal</span> &amp; &#123;  <span class="hljs-attr">honey</span>: <span class="hljs-built_in">boolean</span>&#125;</code></pre></div><p>上面示例中，类型<code>Bear</code>在<code>Animal</code>的基础上添加了一个属性<code>honey</code>。</p><p>上例的<code>&amp;</code>运算符，表示同时具备两个类型的特征，因此可以起到两个对象类型合并的作用。</p><p>作为比较，<code>interface</code>添加属性，采用的是继承的写法。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>&#125;<span class="hljs-keyword">interface</span> <span class="hljs-title class_">Bear</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;  <span class="hljs-attr">honey</span>: <span class="hljs-built_in">boolean</span>&#125;</code></pre></div><p>继承时，type 和 interface 是可以换用的。interface 可以继承 type。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Foo</span> = &#123; <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>; &#125;;<span class="hljs-keyword">interface</span> <span class="hljs-title class_">Bar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Foo</span> &#123;  <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>;&#125;</code></pre></div><p>type 也可以继承 interface。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Foo</span> &#123;  <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;&#125;<span class="hljs-keyword">type</span> <span class="hljs-title class_">Bar</span> = <span class="hljs-title class_">Foo</span> &amp; &#123; <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>; &#125;;</code></pre></div><p>（3）同名<code>interface</code>会自动合并，同名<code>type</code>则会报错。也就是说，TypeScript 不允许使用<code>type</code>多次定义同一个类型。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> A = &#123; <span class="hljs-attr">foo</span>:<span class="hljs-built_in">number</span> &#125;; <span class="hljs-comment">// 报错</span><span class="hljs-keyword">type</span> A = &#123; <span class="hljs-attr">bar</span>:<span class="hljs-built_in">number</span> &#125;; <span class="hljs-comment">// 报错</span></code></pre></div><p>上面示例中，<code>type</code>两次定义了类型<code>A</code>，导致两行都会报错。</p><p>作为比较，<code>interface</code>则会自动合并。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">interface</span> A &#123; <span class="hljs-attr">foo</span>:<span class="hljs-built_in">number</span> &#125;;<span class="hljs-keyword">interface</span> A &#123; <span class="hljs-attr">bar</span>:<span class="hljs-built_in">number</span> &#125;;<span class="hljs-keyword">const</span> <span class="hljs-attr">obj</span>:A = &#123;  <span class="hljs-attr">foo</span>: <span class="hljs-number">1</span>,  <span class="hljs-attr">bar</span>: <span class="hljs-number">1</span>&#125;;</code></pre></div><p>上面示例中，<code>interface</code>把类型<code>A</code>的两个定义合并在一起。</p><p>这表明，interface 是开放的，可以添加属性，type 是封闭的，不能添加属性，只能定义新的 type。</p><p>（4）<code>interface</code>不能包含属性映射（mapping），<code>type</code>可以。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Point</span> &#123;  <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;  <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>;&#125;<span class="hljs-comment">// 正确</span><span class="hljs-keyword">type</span> <span class="hljs-title class_">PointCopy1</span> = &#123;  [<span class="hljs-title class_">Key</span> <span class="hljs-keyword">in</span> keyof <span class="hljs-title class_">Point</span>]: <span class="hljs-title class_">Point</span>[<span class="hljs-title class_">Key</span>];&#125;;<span class="hljs-comment">// 报错</span><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PointCopy2</span> &#123;  [<span class="hljs-title class_">Key</span> <span class="hljs-keyword">in</span> keyof <span class="hljs-title class_">Point</span>]: <span class="hljs-title class_">Point</span>[<span class="hljs-title class_">Key</span>];&#125;;</code></pre></div><p>（5）<code>this</code>关键字只能用于<code>interface</code>。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// 正确</span><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Foo</span> &#123;  <span class="hljs-title function_">add</span>(<span class="hljs-attr">num</span>:<span class="hljs-built_in">number</span>): <span class="hljs-variable language_">this</span>;&#125;;<span class="hljs-comment">// 报错</span><span class="hljs-keyword">type</span> <span class="hljs-title class_">Foo</span> = &#123;  <span class="hljs-title function_">add</span>(<span class="hljs-attr">num</span>:<span class="hljs-built_in">number</span>): <span class="hljs-variable language_">this</span>;&#125;;</code></pre></div><p>上面示例中，type 命令声明的方法<code>add()</code>，返回<code>this</code>就报错了。interface 命令没有这个问题。</p><p>下面是返回<code>this</code>的实际对象的例子。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Foo</span> &#123;  result = <span class="hljs-number">0</span>;  <span class="hljs-title function_">add</span>(<span class="hljs-params">num:<span class="hljs-built_in">number</span></span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span> += num;    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;  &#125;&#125;</code></pre></div><p>（6）type 可以扩展原始数据类型，interface 不行。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// 正确</span><span class="hljs-keyword">type</span> <span class="hljs-title class_">MyStr</span> = <span class="hljs-built_in">string</span> &amp; &#123;  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;new&#x27;</span>&#125;;<span class="hljs-comment">// 报错</span><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyStr</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span> &#123;  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;new&#x27;</span>&#125;</code></pre></div><p>上面示例中，type 可以扩展原始数据类型 string，interface 就不行。</p><p>（7）<code>interface</code>无法表达某些复杂类型（比如交叉类型和联合类型），但是<code>type</code>可以。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> A = &#123; <span class="hljs-comment">/* ... */</span> &#125;;<span class="hljs-keyword">type</span> B = &#123; <span class="hljs-comment">/* ... */</span> &#125;;<span class="hljs-keyword">type</span> <span class="hljs-title class_">AorB</span> = A | B;<span class="hljs-keyword">type</span> <span class="hljs-title class_">AorBwithName</span> = <span class="hljs-title class_">AorB</span> &amp; &#123;  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>&#125;;</code></pre></div><p>上面示例中，类型<code>AorB</code>是一个联合类型，<code>AorBwithName</code>则是为<code>AorB</code>添加一个属性。这两种运算，<code>interface</code>都没法表达。</p><p>综上所述，如果有复杂的类型运算，那么没有其他选择只能使用<code>type</code>；一般情况下，<code>interface</code>灵活性比较高，便于扩充类型或自动合并，建议优先使用。</p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><h3 id="1-属性索引"><a href="#1-属性索引" class="headerlink" title="1. 属性索引"></a>1. 属性索引</h3><p>类允许定义属性索引。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;  [<span class="hljs-attr">s</span>:<span class="hljs-built_in">string</span>]: <span class="hljs-built_in">boolean</span> |    (<span class="hljs-function">(<span class="hljs-params">s:<span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">boolean</span>);  <span class="hljs-title function_">get</span>(<span class="hljs-params">s:<span class="hljs-built_in">string</span></span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>[s] <span class="hljs-keyword">as</span> <span class="hljs-built_in">boolean</span>;  &#125;&#125;</code></pre></div><p>上面示例中，<code>[s:string]</code>表示所有属性名类型为字符串的属性，它们的属性值要么是布尔值，要么是返回布尔值的函数。</p><p>注意，由于类的方法是一种特殊属性（属性值为函数的属性），所以属性索引的类型定义也涵盖了方法。如果一个对象同时定义了属性索引和方法，那么前者必须包含后者的类型。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;  [<span class="hljs-attr">s</span>:<span class="hljs-built_in">string</span>]: <span class="hljs-built_in">boolean</span>;  <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 报错</span>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  &#125;&#125;</code></pre></div><p>上面示例中，属性索引的类型里面不包括方法，导致后面的方法<code>f()</code>定义直接报错。正确的写法是下面这样。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;  [<span class="hljs-attr">s</span>:<span class="hljs-built_in">string</span>]: <span class="hljs-built_in">boolean</span> | (<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">boolean</span>);  <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  &#125;&#125;</code></pre></div><p>属性存取器视同属性。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;  [<span class="hljs-attr">s</span>:<span class="hljs-built_in">string</span>]: <span class="hljs-built_in">boolean</span>;  <span class="hljs-keyword">get</span> <span class="hljs-title function_">isInstance</span>() &#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  &#125;&#125;</code></pre></div><p>上面示例中，属性<code>inInstance</code>的读取器虽然是一个函数方法，但是视同属性，所以属性索引虽然没有涉及方法类型，但是不会报错。</p><h3 id="2-类的-interface-接口"><a href="#2-类的-interface-接口" class="headerlink" title="2. 类的 interface 接口"></a>2. 类的 interface 接口</h3><p>interface 接口或 type 别名，可以用对象的形式，为 class 指定一组检查条件。然后，类使用 implements 关键字，表示当前类满足这些外部类型条件的限制。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Country</span> &#123;  <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;  <span class="hljs-attr">capital</span>:<span class="hljs-built_in">string</span>;&#125;<span class="hljs-comment">// 或者</span><span class="hljs-keyword">type</span> <span class="hljs-title class_">Country</span> = &#123;  <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;  <span class="hljs-attr">capital</span>:<span class="hljs-built_in">string</span>;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCountry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Country</span> &#123;  name = <span class="hljs-string">&#x27;&#x27;</span>;  capital = <span class="hljs-string">&#x27;&#x27;</span>;&#125;</code></pre></div><p>TypeScript 不允许两个同名的类，但是如果一个类和一个接口同名，那么接口会被合并进类。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;  <span class="hljs-attr">x</span>:<span class="hljs-built_in">number</span> = <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">interface</span> A &#123;  <span class="hljs-attr">y</span>:<span class="hljs-built_in">number</span>;&#125;<span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>();a.<span class="hljs-property">y</span> = <span class="hljs-number">10</span>;a.<span class="hljs-property">x</span> <span class="hljs-comment">// 1</span>a.<span class="hljs-property">y</span> <span class="hljs-comment">// 10</span></code></pre></div><p>上面示例中，类<code>A</code>与接口<code>A</code>同名，后者会被合并进前者的类型定义。</p><h3 id="3-结构类型原则"><a href="#3-结构类型原则" class="headerlink" title="3. 结构类型原则"></a>3. 结构类型原则</h3><p>Class 也遵循“结构类型原则”。一个对象只要满足 Class 的实例结构，就跟该 Class 属于同一个类型。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;&#125;<span class="hljs-comment">// 正确</span><span class="hljs-keyword">const</span> <span class="hljs-attr">cust</span>:<span class="hljs-title class_">Customer</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();</code></pre></div><p>上面示例中，<code>Person</code>和<code>Customer</code>是两个结构相同的类，TypeScript 将它们视为相同类型，因此<code>Person</code>可以用在类型为<code>Customer</code>的场合。</p><p>对于那些只设置了类型、没有初值的顶层属性，有一个细节需要注意。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;  <span class="hljs-attr">animalStuff</span>: <span class="hljs-built_in">any</span>;&#125;<span class="hljs-keyword">interface</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;  <span class="hljs-attr">dogStuff</span>: <span class="hljs-title class_">Any</span>&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">AnimalHouse</span> &#123;  <span class="hljs-attr">resident</span>: <span class="hljs-title class_">Animal</span>;  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">animal:Animal</span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">resident</span> = animal;  &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DogHouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">AnimalHouse</span> &#123;  <span class="hljs-attr">resident</span>: <span class="hljs-title class_">Dog</span>;  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">dog:Dog</span>) &#123;    <span class="hljs-variable language_">super</span>(dog);  &#125;&#125;</code></pre></div><p>上面示例中，类<code>DogHouse</code>的顶层成员<code>resident</code>只设置了类型（<code>Dog</code>），没有设置初值。这段代码在不同的编译设置下，编译结果不一样。</p><p>如果编译设置的<code>target</code>设成大于等于<code>ES2022</code>，或者<code>useDefineForClassFields</code>设成<code>true</code>，那么下面代码的执行结果是不一样的。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> dog = &#123;  <span class="hljs-attr">animalStuff</span>: <span class="hljs-string">&#x27;animal&#x27;</span>,  <span class="hljs-attr">dogStuff</span>: <span class="hljs-string">&#x27;dog&#x27;</span>&#125;;<span class="hljs-keyword">const</span> dogHouse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DogHouse</span>(dog);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dogHouse.<span class="hljs-property">resident</span>) <span class="hljs-comment">// undefined</span></code></pre></div><p>解决方法就是使用<code>declare</code>命令，去声明顶层成员的类型，告诉 TypeScript 这些成员的赋值由基类实现。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DogHouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">AnimalHouse</span> &#123;  <span class="hljs-keyword">declare</span> <span class="hljs-attr">resident</span>: <span class="hljs-title class_">Dog</span>;  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">dog:Dog</span>) &#123;    <span class="hljs-variable language_">super</span>(dog);  &#125;&#125;</code></pre></div><p>上面示例中，<code>resident</code>属性的类型声明前面用了<code>declare</code>命令，这样就能确保在编译目标大于等于<code>ES2022</code>时（或者打开<code>useDefineForClassFields</code>时），代码行为正确。</p><h3 id="4-实例属性的简写形式"><a href="#4-实例属性的简写形式" class="headerlink" title="4. 实例属性的简写形式"></a>4. 实例属性的简写形式</h3><p>实际开发中，很多实例属性的值，是通过构造方法传入的。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;  <span class="hljs-attr">x</span>:<span class="hljs-built_in">number</span>;  <span class="hljs-attr">y</span>:<span class="hljs-built_in">number</span>;  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x:<span class="hljs-built_in">number</span>, y:<span class="hljs-built_in">number</span></span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y;  &#125;&#125;</code></pre></div><p>上面实例中，属性<code>x</code>和<code>y</code>的值是通过构造方法的参数传入的。</p><p>这样的写法等于对同一个属性要声明两次类型，一次在类的头部，另一次在构造方法的参数里面。这有些累赘，TypeScript 就提供了一种简写形式。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><span class="hljs-params">    <span class="hljs-keyword">public</span> x:<span class="hljs-built_in">number</span>,</span><span class="hljs-params">    <span class="hljs-keyword">public</span> y:<span class="hljs-built_in">number</span></span><span class="hljs-params">  </span>) &#123;&#125;&#125;<span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>);p.<span class="hljs-property">x</span> <span class="hljs-comment">// 10</span>p.<span class="hljs-property">y</span> <span class="hljs-comment">// 10</span></code></pre></div><p>上面示例中，构造方法的参数<code>x</code>前面有<code>public</code>修饰符，这时 TypeScript 就会自动声明一个公开属性<code>x</code>，不必在构造方法里面写任何代码，同时还会设置<code>x</code>的值为构造方法的参数值。注意，这里的<code>public</code>不能省略。</p><p>除了<code>public</code>修饰符，构造方法的参数名只要有<code>private</code>、<code>protected</code>、<code>readonly</code>修饰符，都会自动声明对应修饰符的实例属性。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><span class="hljs-params">    <span class="hljs-keyword">public</span> a: <span class="hljs-built_in">number</span>,</span><span class="hljs-params">    <span class="hljs-keyword">protected</span> b: <span class="hljs-built_in">number</span>,</span><span class="hljs-params">    <span class="hljs-keyword">private</span> c: <span class="hljs-built_in">number</span>,</span><span class="hljs-params">    <span class="hljs-keyword">readonly</span> d: <span class="hljs-built_in">number</span></span><span class="hljs-params">  </span>) &#123;&#125;&#125;<span class="hljs-comment">// 编译结果</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;    a;    b;    c;    d;    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">a, b, c, d</span>) &#123;      <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = a;      <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span> = b;      <span class="hljs-variable language_">this</span>.<span class="hljs-property">c</span> = c;      <span class="hljs-variable language_">this</span>.<span class="hljs-property">d</span> = d;    &#125;&#125;</code></pre></div><p>上面示例中，从编译结果可以看到，构造方法的<code>a</code>、<code>b</code>、<code>c</code>、<code>d</code>会生成对应的实例属性。</p><p><code>readonly</code>还可以与其他三个可访问性修饰符，一起使用。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><span class="hljs-params">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">readonly</span> x:<span class="hljs-built_in">number</span>,</span><span class="hljs-params">    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">readonly</span> y:<span class="hljs-built_in">number</span>,</span><span class="hljs-params">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> z:<span class="hljs-built_in">number</span></span><span class="hljs-params">  </span>) &#123;&#125;&#125;</code></pre></div><h3 id="5-静态成员"><a href="#5-静态成员" class="headerlink" title="5. 静态成员"></a>5. 静态成员</h3><p>类的内部可以使用<code>static</code>关键字，定义静态成员。</p><p>静态成员是只能通过类本身使用的成员，不能通过实例对象使用。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;  <span class="hljs-keyword">static</span> x = <span class="hljs-number">0</span>;  <span class="hljs-keyword">static</span> <span class="hljs-title function_">printX</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">MyClass</span>.<span class="hljs-property">x</span>);  &#125;&#125;<span class="hljs-title class_">MyClass</span>.<span class="hljs-property">x</span> <span class="hljs-comment">// 0</span><span class="hljs-title class_">MyClass</span>.<span class="hljs-title function_">printX</span>() <span class="hljs-comment">// 0</span></code></pre></div><p>上面示例中，<code>x</code>是静态属性，<code>printX()</code>是静态方法。它们都必须通过<code>MyClass</code>获取，而不能通过实例对象调用。</p><p><code>static</code>关键字前面可以使用 public、private、protected 修饰符。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> x = <span class="hljs-number">0</span>;&#125;<span class="hljs-title class_">MyClass</span>.<span class="hljs-property">x</span> <span class="hljs-comment">// 报错</span></code></pre></div><p>上面示例中，静态属性<code>x</code>前面有<code>private</code>修饰符，表示只能在<code>MyClass</code>内部使用，如果在外部调用这个属性就会报错。</p><p>静态私有属性也可以用 ES6 语法的<code>#</code>前缀表示，上面示例可以改写如下。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;  <span class="hljs-keyword">static</span> #x = <span class="hljs-number">0</span>;&#125;</code></pre></div><p>注意，静态成员不能使用泛型的类型参数。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span>&lt;<span class="hljs-title class_">Type</span>&gt; &#123;  <span class="hljs-keyword">static</span> <span class="hljs-attr">defaultContents</span>: <span class="hljs-title class_">Type</span>; <span class="hljs-comment">// 报错</span>&#125;</code></pre></div><h3 id="6-抽象类，抽象成员"><a href="#6-抽象类，抽象成员" class="headerlink" title="6.抽象类，抽象成员"></a>6.抽象类，抽象成员</h3><p>TypeScript 允许在类的定义前面，加上关键字<code>abstract</code>，表示该类不能被实例化，只能当作其他类的模板。这种类就叫做“抽象类”（abstract class）。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;  id = <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>(); <span class="hljs-comment">// 报错</span></code></pre></div><p>上面示例中，直接新建抽象类的实例，会报错。</p><p>抽象类只能当作基类使用，用来在它的基础上定义子类。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;  id = <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123;  amount = <span class="hljs-number">100</span>;&#125;<span class="hljs-keyword">const</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">B</span>();b.<span class="hljs-property">id</span> <span class="hljs-comment">// 1</span>b.<span class="hljs-property">amount</span> <span class="hljs-comment">// 100</span></code></pre></div><p>抽象类的子类也可以是抽象类，也就是说，抽象类可以继承其他抽象类。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;  <span class="hljs-attr">foo</span>:<span class="hljs-built_in">number</span>;&#125;<span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123;  <span class="hljs-attr">bar</span>:<span class="hljs-built_in">string</span>;&#125;</code></pre></div><p>抽象类的内部可以有已经实现好的属性和方法，也可以有还未实现的属性和方法。后者就叫做“抽象成员”（abstract member），即属性名和方法名有<code>abstract</code>关键字，表示该方法需要子类实现。如果子类没有实现抽象成员，就会报错。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;  <span class="hljs-keyword">abstract</span> <span class="hljs-attr">foo</span>:<span class="hljs-built_in">string</span>;  <span class="hljs-attr">bar</span>:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;&#x27;</span>;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123;  foo = <span class="hljs-string">&#x27;b&#x27;</span>;&#125;</code></pre></div><p>上面示例中，抽象类<code>A</code>定义了抽象属性<code>foo</code>，子类<code>B</code>必须实现这个属性，否则会报错。</p><p>下面是抽象方法的例子。如果抽象类的方法前面加上<code>abstract</code>，就表明子类必须给出该方法的实现。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;  <span class="hljs-keyword">abstract</span> <span class="hljs-title function_">execute</span>():<span class="hljs-built_in">string</span>;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123;  <span class="hljs-title function_">execute</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`B executed`</span>;  &#125;&#125;</code></pre></div><p>这里有几个注意点。</p><p>（1）抽象成员只能存在于抽象类，不能存在于普通类。</p><p>（2）抽象成员不能有具体实现的代码。也就是说，已经实现好的成员前面不能加<code>abstract</code>关键字。</p><p>（3）抽象成员前也不能有<code>private</code>修饰符，否则无法在子类中实现该成员。</p><p>（4）一个子类最多只能继承一个抽象类。</p><p>总之，抽象类的作用是，确保各种相关的子类都拥有跟基类相同的接口，可以看作是模板。其中的抽象成员都是必须由子类实现的成员，非抽象成员则表示基类已经实现的、由所有子类共享的成员。</p><h3 id="7-this-问题"><a href="#7-this-问题" class="headerlink" title="7. this 问题"></a>7. this 问题</h3><p>类的方法经常用到<code>this</code>关键字，它表示该方法当前所在的对象。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;  name = <span class="hljs-string">&#x27;A&#x27;</span>;  <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;  &#125;&#125;<span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>();a.<span class="hljs-title function_">getName</span>() <span class="hljs-comment">// &#x27;A&#x27;</span><span class="hljs-keyword">const</span> b = &#123;  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;b&#x27;</span>,  <span class="hljs-attr">getName</span>: a.<span class="hljs-property">getName</span>&#125;;b.<span class="hljs-title function_">getName</span>() <span class="hljs-comment">// &#x27;b&#x27;</span></code></pre></div><p>上面示例中，变量<code>a</code>和<code>b</code>的<code>getName()</code>是同一个方法，但是执行结果不一样，原因就是它们内部的<code>this</code>指向不一样的对象。如果<code>getName()</code>在变量<code>a</code>上运行，<code>this</code>指向<code>a</code>；如果在<code>b</code>上运行，<code>this</code>指向<code>b</code>。</p><p>关于 b 的理解为下方代码</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> b = &#123;  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;b&#x27;</span>,  <span class="hljs-attr">getName</span>: a.<span class="hljs-property">getName</span>&#125;;等同于<span class="hljs-keyword">const</span> b = &#123;  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;b&#x27;</span>,  <span class="hljs-attr">getName</span>: <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;  &#125;&#125;;b.<span class="hljs-title function_">getName</span>() <span class="hljs-comment">// &#x27;b&#x27;</span></code></pre></div><p>有些场合需要给出<code>this</code>类型，但是 JavaScript 函数通常不带有<code>this</code>参数，这时 TypeScript 允许函数增加一个名为<code>this</code>的参数，放在参数列表的第一位，用来描述函数内部的<code>this</code>关键字的类型。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// 编译前</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span><span class="hljs-params">  <span class="hljs-variable language_">this</span>: SomeType,</span><span class="hljs-params">  x: <span class="hljs-built_in">number</span></span><span class="hljs-params"></span>) &#123;  <span class="hljs-comment">/* ... */</span>&#125;<span class="hljs-comment">// 编译后</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">x</span>) &#123;  <span class="hljs-comment">/* ... */</span>&#125;</code></pre></div><p>上面示例中，函数<code>fn()</code>的第一个参数是<code>this</code>，用来声明函数内部的<code>this</code>的类型。编译时，TypeScript 一旦发现函数的第一个参数名为<code>this</code>，则会去除这个参数，即编译结果不会带有该参数。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;  name = <span class="hljs-string">&#x27;A&#x27;</span>;  <span class="hljs-title function_">getName</span>(<span class="hljs-params"><span class="hljs-variable language_">this</span>: A</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;  &#125;&#125;<span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>();<span class="hljs-keyword">const</span> b = a.<span class="hljs-property">getName</span>;<span class="hljs-title function_">b</span>() <span class="hljs-comment">// 报错</span></code></pre></div><p>上面示例中，类<code>A</code>的<code>getName()</code>添加了<code>this</code>参数，如果直接调用这个方法，<code>this</code>的类型就会跟声明的类型不一致，从而报错。</p><p>上述理解：</p><div class="code-wrapper"><pre><code class="hljs jsx"><span class="hljs-title function_">b</span>() <span class="hljs-comment">// 报错 </span>此时 b 是一个函数<span class="hljs-keyword">function</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"><span class="hljs-variable language_">this</span>: A</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;&#125;直接调用 <span class="hljs-title function_">b</span>() 此时参数类型为 <span class="hljs-keyword">void</span> 因为 b 没有调用类型需要将 b 绑定一个 类型为 A 的调用者<span class="hljs-keyword">const</span> bb = b.<span class="hljs-title function_">bind</span>(a)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">bb</span>())这时 <span class="hljs-title function_">bb</span>() 调用 <span class="hljs-variable language_">this</span> 为 a 类型是 A</code></pre></div><p><code>this</code>参数的类型可以声明为各种对象。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span><span class="hljs-params">  <span class="hljs-variable language_">this</span>: &#123; name: <span class="hljs-built_in">string</span> &#125;</span><span class="hljs-params"></span>) &#123;  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Jack&#x27;</span>;  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-number">0</span>; <span class="hljs-comment">// 报错</span>&#125;foo.<span class="hljs-title function_">call</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-number">123</span> &#125;); <span class="hljs-comment">// 报错</span></code></pre></div><p>上面示例中，参数<code>this</code>的类型是一个带有<code>name</code>属性的对象，不符合这个条件的<code>this</code>都会报错。</p><p>TypeScript 提供了一个<code>noImplicitThis</code>编译选项。如果打开了这个设置项，如果<code>this</code>的值推断为<code>any</code>类型，就会报错。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// noImplicitThis 打开</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> &#123;  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><span class="hljs-params">    <span class="hljs-keyword">public</span> width:<span class="hljs-built_in">number</span>,</span><span class="hljs-params">    <span class="hljs-keyword">public</span> height:<span class="hljs-built_in">number</span></span><span class="hljs-params">  </span>) &#123;&#125;  <span class="hljs-title function_">getAreaFunction</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">width</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span>; <span class="hljs-comment">// 报错</span>    &#125;;  &#125;&#125;</code></pre></div><p>上面示例中，<code>getAreaFunction()</code>方法返回一个函数，这个函数里面用到了<code>this</code>，但是这个<code>this</code>跟<code>Rectangle</code>这个类没关系，它的类型推断为<code>any</code>，所以就报错了。</p><p>在类的内部，<code>this</code>本身也可以当作类型使用，表示当前类的实例对象。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span> &#123;  <span class="hljs-attr">contents</span>:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;&#x27;</span>;  <span class="hljs-title function_">set</span>(<span class="hljs-attr">value</span>:<span class="hljs-built_in">string</span>):<span class="hljs-variable language_">this</span> &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">contents</span> = value;    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;  &#125;&#125;</code></pre></div><p>上面示例中，<code>set()</code>方法的返回值类型就是<code>this</code>，表示当前的实例对象。</p><p>注意，<code>this</code>类型不允许应用于静态成员。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;  <span class="hljs-keyword">static</span> <span class="hljs-attr">a</span>:<span class="hljs-variable language_">this</span>; <span class="hljs-comment">// 报错</span>&#125;</code></pre></div><p>上面示例中，静态属性<code>a</code>的返回值类型是<code>this</code>，就报错了。原因是<code>this</code>类型表示实例对象，但是静态成员拿不到实例对象。</p><p>有些方法返回一个布尔值，表示当前的<code>this</code>是否属于某种类型。这时，这些方法的返回值类型可以写成<code>this is Type</code>的形式，其中用到了<code>is</code>运算符。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileSystemObject</span> &#123;  <span class="hljs-title function_">isFile</span>(): <span class="hljs-variable language_">this</span> is <span class="hljs-title class_">FileRep</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">FileRep</span>;  &#125;  <span class="hljs-title function_">isDirectory</span>(): <span class="hljs-variable language_">this</span> is <span class="hljs-title class_">Directory</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Directory</span>;  &#125;  <span class="hljs-comment">// ...</span>&#125;</code></pre></div><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>有些时候，函数返回值的类型与参数类型是相关的。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFirst</span>(<span class="hljs-params">arr</span>) &#123;  <span class="hljs-keyword">return</span> arr[<span class="hljs-number">0</span>];&#125;</code></pre></div><p>上面示例中，函数<code>getFirst()</code>总是返回参数数组的第一个成员。参数数组是什么类型，返回值就是什么类型。</p><p>这个函数的类型声明只能写成下面这样。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">arr:<span class="hljs-built_in">any</span>[]</span>):<span class="hljs-built_in">any</span> &#123;  <span class="hljs-keyword">return</span> arr[<span class="hljs-number">0</span>];&#125;</code></pre></div><p>上面的类型声明，就反映不出参数与返回值之间的类型关系。</p><p>为了解决这个问题，TypeScript 就引入了“泛型”（generics）。泛型的特点就是带有“类型参数”（type parameter）。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> getFirst&lt;T&gt;(<span class="hljs-attr">arr</span>:T[]):T &#123;  <span class="hljs-keyword">return</span> arr[<span class="hljs-number">0</span>];&#125;</code></pre></div><p>上面示例中，函数<code>getFirst()</code>的函数名后面尖括号的部分<code>&lt;T&gt;</code>，就是类型参数，参数要放在一对尖括号（<code>&lt;&gt;</code>）里面。本例只有一个类型参数<code>T</code>，可以将其理解为类型声明需要的变量，需要在调用时传入具体的参数类型。</p><p>上例的函数<code>getFirst()</code>的参数类型是<code>T[]</code>，返回值类型是<code>T</code>，就清楚地表示了两者之间的关系。比如，输入的参数类型是<code>number[]</code>，那么 T 的值就是<code>number</code>，因此返回值类型也是<code>number</code>。</p><p>函数调用时，需要提供类型参数。</p><div class="code-wrapper"><pre><code class="hljs tsx">getFirst&lt;<span class="hljs-built_in">number</span>&gt;([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])</code></pre></div><p>上面示例中，调用函数<code>getFirst()</code>时，需要在函数名后面使用尖括号，给出类型参数<code>T</code>的值，本例是<code>&lt;number&gt;</code>。</p><p>不过为了方便，函数调用时，往往省略不写类型参数的值，让 TypeScript 自己推断。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-title function_">getFirst</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])</code></pre></div><p>上面示例中，TypeScript 会从实际参数<code>[1, 2, 3]</code>，推断出类型参数 T 的值为<code>number</code>。</p><p>类型参数的名字，可以随便取，但是必须为合法的标识符。习惯上，类型参数的第一个字符往往采用大写字母。一般会使用<code>T</code>（type 的第一个字母）作为类型参数的名字。如果有多个类型参数，则使用 T 后面的 U、V 等字母命名，各个参数之间使用逗号（“,”）分隔。</p><p>下面是多个类型参数的例子。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> map&lt;T, U&gt;(  <span class="hljs-attr">arr</span>:T[],  <span class="hljs-attr">f</span>:<span class="hljs-function">(<span class="hljs-params">arg:T</span>) =&gt;</span> U):U[] &#123;  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">map</span>(f);&#125;<span class="hljs-comment">// 用法实例</span>map&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>&gt;(  [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>],  <span class="hljs-function">(<span class="hljs-params">n</span>) =&gt;</span> <span class="hljs-built_in">parseInt</span>(n)); <span class="hljs-comment">// 返回 [1, 2, 3]</span></code></pre></div><p>上面示例将数组的实例方法<code>map()</code>改写成全局函数，它有两个类型参数<code>T</code>和<code>U</code>。含义是，原始数组的类型为<code>T[]</code>，对该数组的每个成员执行一个处理函数<code>f</code>，将类型<code>T</code>转成类型<code>U</code>，那么就会得到一个类型为<code>U[]</code>的数组。</p><p>总之，泛型可以理解成一段类型逻辑，需要类型参数来表达。有了类型参数以后，可以在输入类型与输出类型之间，建立一一对应关系。</p><h3 id="2-泛型的写法"><a href="#2-泛型的写法" class="headerlink" title="2.泛型的写法"></a>2.泛型的写法</h3><h4 id="2-1-函数的泛型写法"><a href="#2-1-函数的泛型写法" class="headerlink" title="2.1 函数的泛型写法"></a>2.1 函数的泛型写法</h4><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> id&lt;T&gt;(<span class="hljs-attr">arg</span>:T):T &#123;  <span class="hljs-keyword">return</span> arg;&#125;</code></pre></div><p>那么对于变量形式定义的函数，泛型有下面两种写法。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// 写法一</span><span class="hljs-keyword">let</span> <span class="hljs-attr">myId</span>:&lt;T&gt;<span class="hljs-function">(<span class="hljs-params">arg:T</span>) =&gt;</span> T = id;<span class="hljs-comment">// 写法二</span><span class="hljs-keyword">let</span> <span class="hljs-attr">myId</span>:&#123; &lt;T&gt;(<span class="hljs-attr">arg</span>:T): T &#125; = id;        <span class="hljs-comment">// 理解 let instanceType: Type = instanceType</span><span class="hljs-comment">// 写法一</span><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">AT</span> = &lt;T&gt;<span class="hljs-function">(<span class="hljs-params">arg:T</span>) =&gt;</span> T;<span class="hljs-keyword">let</span> <span class="hljs-attr">myId</span>:<span class="hljs-variable constant_">AT</span> = id; <span class="hljs-comment">// 写法二 解构函数 详见 文档 https://wangdoc.com/typescript/function</span><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">AT</span> = &#123; &lt;T&gt;(<span class="hljs-attr">arg</span>:T): T &#125; ;<span class="hljs-keyword">let</span> <span class="hljs-attr">myId</span>:<span class="hljs-variable constant_">AT</span> = id;</code></pre></div><h4 id="2-2-接口的泛型写法"><a href="#2-2-接口的泛型写法" class="headerlink" title="2.2 接口的泛型写法"></a>2.2 接口的泛型写法</h4><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Comparator</span>&lt;T&gt; &#123;  <span class="hljs-title function_">compareTo</span>(<span class="hljs-attr">value</span>:T): <span class="hljs-built_in">number</span>;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;<span class="hljs-title class_">Rectangle</span>&gt; &#123;  <span class="hljs-title function_">compareTo</span>(<span class="hljs-attr">value</span>:<span class="hljs-title class_">Rectangle</span>): <span class="hljs-built_in">number</span> &#123;    <span class="hljs-comment">// ...</span>  &#125;&#125;</code></pre></div><p>上面示例中，先定义了一个泛型接口，然后将这个接口用于一个类。</p><p>实例：可以对不同的类型 用不同的实现 更加清晰每个类型处理</p><h4 id="2-3-类的泛型写法"><a href="#2-3-类的泛型写法" class="headerlink" title="2.3 类的泛型写法"></a>2.3 类的泛型写法</h4><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>&lt;<span class="hljs-title class_">NumType</span>&gt; &#123;  value!: <span class="hljs-title class_">NumType</span>;  add!: <span class="hljs-function">(<span class="hljs-params">x: NumType, y: NumType</span>) =&gt;</span> <span class="hljs-title class_">NumType</span>;&#125;<span class="hljs-keyword">let</span> foo = <span class="hljs-keyword">new</span> C&lt;<span class="hljs-built_in">number</span>&gt;();foo.<span class="hljs-property">value</span> = <span class="hljs-number">0</span>;foo.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) &#123;  <span class="hljs-keyword">return</span> x + y;&#125;;</code></pre></div><h4 id="2-4-类型别名的泛型写法"><a href="#2-4-类型别名的泛型写法" class="headerlink" title="2.4 类型别名的泛型写法"></a>2.4 类型别名的泛型写法</h4><p>type 命令定义的类型别名，也可以使用泛型。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Nullable</span>&lt;T&gt; = T | <span class="hljs-literal">undefined</span> | <span class="hljs-literal">null</span>;</code></pre></div><p>上面示例中，<code>Nullable&lt;T&gt;</code>是一个泛型，只要传入一个类型，就可以得到这个类型与<code>undefined</code>和<code>null</code>的一个联合类型。</p><p>下面是另一个例子。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Container</span>&lt;T&gt; = &#123; <span class="hljs-attr">value</span>: T &#125;;<span class="hljs-keyword">const</span> <span class="hljs-attr">a</span>: <span class="hljs-title class_">Container</span>&lt;<span class="hljs-built_in">number</span>&gt; = &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">0</span> &#125;;<span class="hljs-keyword">const</span> <span class="hljs-attr">b</span>: <span class="hljs-title class_">Container</span>&lt;<span class="hljs-built_in">string</span>&gt; = &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;b&#x27;</span> &#125;;</code></pre></div><p>下面是定义树形结构的例子。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Tree</span>&lt;T&gt; = &#123;  <span class="hljs-attr">value</span>: T;  <span class="hljs-attr">left</span>: <span class="hljs-title class_">Tree</span>&lt;T&gt; | <span class="hljs-literal">null</span>;  <span class="hljs-attr">right</span>: <span class="hljs-title class_">Tree</span>&lt;T&gt; | <span class="hljs-literal">null</span>;&#125;;</code></pre></div><p>上面示例中，类型别名<code>Tree</code>内部递归引用了<code>Tree</code>自身。</p><h3 id="3-类型参数的默认值"><a href="#3-类型参数的默认值" class="headerlink" title="3. 类型参数的默认值"></a>3. 类型参数的默认值</h3><p>类型参数可以设置默认值。使用时，如果没有给出类型参数的值，就会使用默认值。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> getFirst&lt;T = <span class="hljs-built_in">string</span>&gt;(  <span class="hljs-attr">arr</span>:T[]):T &#123;  <span class="hljs-keyword">return</span> arr[<span class="hljs-number">0</span>];&#125;</code></pre></div><p>上面示例中，<code>T = string</code>表示类型参数的默认值是<code>string</code>。调用<code>getFirst()</code>时，如果不给出<code>T</code>的值，TypeScript 就认为<code>T</code>等于<code>string</code>。</p><p>但是，因为 TypeScript 会从实际参数推断出<code>T</code>的值，从而覆盖掉默认值，所以下面的代码不会报错。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-title function_">getFirst</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) <span class="hljs-comment">// 正确</span></code></pre></div><p>上面示例中，实际参数是<code>[1, 2, 3]</code>，TypeScript 推断 T 等于<code>number</code>，从而覆盖掉默认值<code>string</code>。</p><p>类型参数的默认值，往往用在类中。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic</span>&lt;T = <span class="hljs-built_in">string</span>&gt; &#123;  <span class="hljs-attr">list</span>:T[] = []  <span class="hljs-title function_">add</span>(<span class="hljs-params">t:T</span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(t)  &#125;&#125;</code></pre></div><p>上面示例中，类<code>Generic</code>有一个类型参数<code>T</code>，默认值为<code>string</code>。这意味着，属性<code>list</code>默认是一个字符串数组，方法<code>add()</code>的默认参数是一个字符串。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>();g.<span class="hljs-title function_">add</span>(<span class="hljs-number">4</span>) <span class="hljs-comment">// 报错</span>g.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;hello&#x27;</span>) <span class="hljs-comment">// 正确</span></code></pre></div><p>上面示例中，新建<code>Generic</code>的实例<code>g</code>时，没有给出类型参数<code>T</code>的值，所以<code>T</code>就等于<code>string</code>。因此，向<code>add()</code>方法传入一个数值会报错，传入字符串就不会。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;<span class="hljs-built_in">number</span>&gt;();g.<span class="hljs-title function_">add</span>(<span class="hljs-number">4</span>) <span class="hljs-comment">// 正确</span>g.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;hello&#x27;</span>) <span class="hljs-comment">// 报错</span></code></pre></div><p>上面示例中，新建实例<code>g</code>时，给出了类型参数<code>T</code>的值是<code>number</code>，因此<code>add()</code>方法传入数值不会报错，传入字符串会报错。</p><p>一旦类型参数有默认值，就表示它是可选参数。如果有多个类型参数，可选参数必须在必选参数之后。</p><div class="code-wrapper"><pre><code class="hljs tsx">&lt;T = <span class="hljs-built_in">boolean</span>, U&gt; <span class="hljs-comment">// 错误</span>&lt;T, U = <span class="hljs-built_in">boolean</span>&gt; <span class="hljs-comment">// 正确</span></code></pre></div><p>上面示例中，依次有两个类型参数<code>T</code>和<code>U</code>。如果<code>T</code>是可选参数，<code>U</code>不是，就会报错。</p><h3 id="4-类型参数的约束条件"><a href="#4-类型参数的约束条件" class="headerlink" title="4. 类型参数的约束条件"></a>4. 类型参数的约束条件</h3><p>很多类型参数并不是无限制的，对于传入的类型存在约束条件。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> comp&lt;<span class="hljs-title class_">Type</span>&gt;(<span class="hljs-attr">a</span>:<span class="hljs-title class_">Type</span>, <span class="hljs-attr">b</span>:<span class="hljs-title class_">Type</span>) &#123;  <span class="hljs-keyword">if</span> (a.<span class="hljs-property">length</span> &gt;= b.<span class="hljs-property">length</span>) &#123;    <span class="hljs-keyword">return</span> a;  &#125;  <span class="hljs-keyword">return</span> b;&#125;</code></pre></div><p>上面示例中，类型参数 Type 有一个隐藏的约束条件：它必须存在<code>length</code>属性。如果不满足这个条件，就会报错。</p><p>TypeScript 提供了一种语法，允许在类型参数上面写明约束条件，如果不满足条件，编译时就会报错。这样也可以有良好的语义，对类型参数进行说明。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> comp&lt;T <span class="hljs-keyword">extends</span> &#123; <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span> &#125;&gt;(  <span class="hljs-attr">a</span>: T,  <span class="hljs-attr">b</span>: T) &#123;  <span class="hljs-keyword">if</span> (a.<span class="hljs-property">length</span> &gt;= b.<span class="hljs-property">length</span>) &#123;    <span class="hljs-keyword">return</span> a;  &#125;  <span class="hljs-keyword">return</span> b;&#125;</code></pre></div><p>上面示例中，<code>T extends &#123; length: number &#125;</code>就是约束条件，表示类型参数 T 必须满足<code>&#123; length: number &#125;</code>，否则就会报错。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-title function_">comp</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) <span class="hljs-comment">// 正确</span><span class="hljs-title function_">comp</span>(<span class="hljs-string">&#x27;ab&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>) <span class="hljs-comment">// 正确</span><span class="hljs-title function_">comp</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// 报错</span></code></pre></div><p>上面示例中，只要传入的参数类型不满足约束条件，就会报错。</p><p>类型参数的约束条件采用下面的形式。</p><div class="code-wrapper"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">TypeParameter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ConstraintType</span>&gt;</code></pre></div><p>上面语法中，<code>TypeParameter</code>表示类型参数，<code>extends</code>是关键字，这是必须的，<code>ConstraintType</code>表示类型参数要满足的条件，即类型参数应该是<code>ConstraintType</code>的子类型。</p><p>类型参数可以同时设置约束条件和默认值，前提是默认值必须满足约束条件。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Fn</span>&lt;A <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>, B <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;world&#x27;</span>&gt;  =  [A, B];<span class="hljs-keyword">type</span> <span class="hljs-title class_">Result</span> = <span class="hljs-title class_">Fn</span>&lt;<span class="hljs-string">&#x27;hello&#x27;</span>&gt; <span class="hljs-comment">// [&quot;hello&quot;, &quot;world&quot;]</span></code></pre></div><h3 id="5-泛型可以嵌套。"><a href="#5-泛型可以嵌套。" class="headerlink" title="5.泛型可以嵌套。"></a>5.泛型可以嵌套。</h3><p>类型参数可以是另一个泛型。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">OrNull</span>&lt;<span class="hljs-title class_">Type</span>&gt; = <span class="hljs-title class_">Type</span>|<span class="hljs-literal">null</span>;<span class="hljs-keyword">type</span> <span class="hljs-title class_">OneOrMany</span>&lt;<span class="hljs-title class_">Type</span>&gt; = <span class="hljs-title class_">Type</span>|<span class="hljs-title class_">Type</span>[];<span class="hljs-keyword">type</span> <span class="hljs-title class_">OneOrManyOrNull</span>&lt;<span class="hljs-title class_">Type</span>&gt; = <span class="hljs-title class_">OrNull</span>&lt;<span class="hljs-title class_">OneOrMany</span>&lt;<span class="hljs-title class_">Type</span>&gt;&gt;;</code></pre></div><p>上面示例中，最后一行的泛型<code>OrNull</code>的类型参数，就是另一个泛型<code>OneOrMany</code>。</p><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><h3 id="1-类型断言有两种语法。"><a href="#1-类型断言有两种语法。" class="headerlink" title="1. 类型断言有两种语法。"></a>1. 类型断言有两种语法。</h3><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// 语法一：&lt;类型&gt;值</span>&lt;<span class="hljs-title class_">Type</span>&gt;value<span class="hljs-comment">// 语法二：值 as 类型</span>value <span class="hljs-keyword">as</span> <span class="hljs-title class_">Type</span></code></pre></div><p>上面两种语法是等价的，<code>value</code>表示值，<code>Type</code>表示类型。早期只有语法一，后来因为 TypeScript 开始支持 React 的 JSX 语法（尖括号表示 HTML 元素），为了避免两者冲突，就引入了语法二。目前，推荐使用语法二。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// 语法一</span><span class="hljs-keyword">let</span> <span class="hljs-attr">bar</span>:T = &lt;T&gt;foo;<span class="hljs-comment">// 语法二</span><span class="hljs-keyword">let</span> <span class="hljs-attr">bar</span>:T = foo <span class="hljs-keyword">as</span> T;</code></pre></div><p>上面示例是两种类型断言的语法，其中的语法一因为跟 JSX 语法冲突，使用时必须关闭 TypeScript 的 React 支持，否则会无法识别。由于这个原因，现在一般都使用语法二。</p><h3 id="2-类型断言的条件"><a href="#2-类型断言的条件" class="headerlink" title="2.类型断言的条件"></a>2.类型断言的条件</h3><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> n = <span class="hljs-number">1</span>;<span class="hljs-keyword">const</span> <span class="hljs-attr">m</span>:<span class="hljs-built_in">string</span> = n <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 报错</span></code></pre></div><p>类型断言要求实际的类型与断言的类型兼容，实际类型可以断言为一个更加宽泛的类型（父类型），也可以断言为一个更加精确的类型（子类型），但不能断言为一个完全无关的类型。</p><p>但是，如果真的要断言成一个完全无关的类型，也是可以做到的。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// 或者写成 &lt;T&gt;&lt;unknown&gt;expr</span>expr <span class="hljs-keyword">as</span> <span class="hljs-built_in">unknown</span> <span class="hljs-keyword">as</span> T</code></pre></div><p>上面代码中，<code>expr</code>连续进行了两次类型断言，第一次断言为<code>unknown</code>类型，第二次断言为<code>T</code>类型。这样的话，<code>expr</code>就可以断言成任意类型<code>T</code>，而不报错。</p><p>下面是本小节开头那个例子的改写。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> n = <span class="hljs-number">1</span>;<span class="hljs-keyword">const</span> <span class="hljs-attr">m</span>:<span class="hljs-built_in">string</span> = n <span class="hljs-keyword">as</span> <span class="hljs-built_in">unknown</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 正确</span></code></pre></div><h3 id="3-as-const-断言"><a href="#3-as-const-断言" class="headerlink" title="3. as const 断言"></a>3. as const 断言</h3><p>如果没有声明变量类型，let 命令声明的变量，会被类型推断为 TypeScript 内置的基本类型之一；const 命令声明的变量，则被推断为值类型常量。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// 类型推断为基本类型 string</span><span class="hljs-keyword">let</span> s1 = <span class="hljs-string">&#x27;JavaScript&#x27;</span>;<span class="hljs-comment">// 类型推断为字符串 “JavaScript”</span><span class="hljs-keyword">const</span> s2 = <span class="hljs-string">&#x27;JavaScript&#x27;</span>;</code></pre></div><p>上面示例中，变量<code>s1</code>的类型被推断为<code>string</code>，变量<code>s2</code>的类型推断为值类型<code>JavaScript</code>。后者是前者的子类型，相当于 const 命令有更强的限定作用，可以缩小变量的类型范围。</p><p>有些时候，let 变量会出现一些意想不到的报错，变更成 const 变量就能消除报错。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">let</span> s = <span class="hljs-string">&#x27;JavaScript&#x27;</span>;<span class="hljs-keyword">type</span> <span class="hljs-title class_">Lang</span> =  |<span class="hljs-string">&#x27;JavaScript&#x27;</span>  |<span class="hljs-string">&#x27;TypeScript&#x27;</span>  |<span class="hljs-string">&#x27;Python&#x27;</span>;<span class="hljs-keyword">function</span> <span class="hljs-title function_">setLang</span>(<span class="hljs-params">language:Lang</span>) &#123;  <span class="hljs-comment">/* ... */</span>&#125;<span class="hljs-title function_">setLang</span>(s); <span class="hljs-comment">// 报错</span></code></pre></div><p>上面示例中，最后一行报错，原因是函数<code>setLang()</code>的参数<code>language</code>类型是<code>Lang</code>，这是一个联合类型。但是，传入的字符串<code>s</code>的类型被推断为<code>string</code>，属于<code>Lang</code>的父类型。父类型不能替代子类型，导致报错。</p><p>一种解决方法就是把 let 命令改成 const 命令。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> s = <span class="hljs-string">&#x27;JavaScript&#x27;</span>;</code></pre></div><p>这样的话，变量<code>s</code>的类型就是值类型<code>JavaScript</code>，它是联合类型<code>Lang</code>的子类型，传入函数<code>setLang()</code>就不会报错。</p><p>另一种解决方法是使用类型断言。TypeScript 提供了一种特殊的类型断言<code>as const</code>，用于告诉编译器，推断类型时，可以将这个值推断为常量，即把 let 变量断言为 const 变量，从而把内置的基本类型变更为值类型。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">let</span> s = <span class="hljs-string">&#x27;JavaScript&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span>;<span class="hljs-title function_">setLang</span>(s);  <span class="hljs-comment">// 正确</span></code></pre></div><p>上面示例中，变量<code>s</code>虽然是用 let 命令声明的，但是使用了<code>as const</code>断言以后，就等同于是用 const 命令声明的，变量<code>s</code>的类型会被推断为值类型<code>JavaScript</code>。</p><p>使用了<code>as const</code>断言以后，let 变量就不能再改变值了。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">let</span> s = <span class="hljs-string">&#x27;JavaScript&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span>;s = <span class="hljs-string">&#x27;Python&#x27;</span>; <span class="hljs-comment">// 报错</span></code></pre></div><p>上面示例中，let 命令声明的变量<code>s</code>，使用<code>as const</code>断言以后，就不能改变值了，否则报错。</p><p>注意，<code>as const</code>断言只能用于字面量，不能用于变量。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">let</span> s = <span class="hljs-string">&#x27;JavaScript&#x27;</span>;<span class="hljs-title function_">setLang</span>(s <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span>); <span class="hljs-comment">// 报错</span></code></pre></div><p>上面示例中，<code>as const</code>断言用于变量<code>s</code>，就报错了。下面的写法可以更清晰地看出这一点。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">let</span> s1 = <span class="hljs-string">&#x27;JavaScript&#x27;</span>;<span class="hljs-keyword">let</span> s2 = s1 <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span>; <span class="hljs-comment">// 报错</span></code></pre></div><p>另外，<code>as const</code>也不能用于表达式。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">let</span> s = (<span class="hljs-string">&#x27;Java&#x27;</span> + <span class="hljs-string">&#x27;Script&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span>; <span class="hljs-comment">// 报错</span></code></pre></div><p>上面示例中，<code>as const</code>用于表达式，导致报错。</p><p><code>as const</code>也可以写成前置的形式。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// 后置形式</span>expr <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span><span class="hljs-comment">// 前置形式</span>&lt;<span class="hljs-keyword">const</span>&gt;expr</code></pre></div><p><code>as const</code>断言可以用于整个对象，也可以用于对象的单个属性，这时它的类型缩小效果是不一样的。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> v1 = &#123;  <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>,  <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>,&#125;; <span class="hljs-comment">// 类型是 &#123; x: number; y: number; &#125;</span><span class="hljs-keyword">const</span> v2 = &#123;  <span class="hljs-attr">x</span>: <span class="hljs-number">1</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span>,  <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>,&#125;; <span class="hljs-comment">// 类型是 &#123; x: 1; y: number; &#125;</span><span class="hljs-keyword">const</span> v3 = &#123;  <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>,  <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>,&#125; <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span>; <span class="hljs-comment">// 类型是 &#123; readonly x: 1; readonly y: 2; &#125;</span></code></pre></div><p>上面示例中，第二种写法是对属性<code>x</code>缩小类型，第三种写法是对整个对象缩小类型。</p><p>总之，<code>as const</code>会将字面量的类型断言为不可变类型，缩小成 TypeScript 允许的最小类型。</p><p>下面是数组的例子。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// a1 的类型推断为 number[]</span><span class="hljs-keyword">const</span> a1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<span class="hljs-comment">// a2 的类型推断为 readonly [1, 2, 3]</span><span class="hljs-keyword">const</span> a2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>] <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span>;</code></pre></div><p>上面示例中，数组字面量使用<code>as const</code>断言后，类型推断就变成了只读元组。</p><p>由于<code>as const</code>会将数组变成只读元组，所以很适合用于函数的 rest 参数。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x:<span class="hljs-built_in">number</span>, y:<span class="hljs-built_in">number</span></span>) &#123;  <span class="hljs-keyword">return</span> x + y;&#125;<span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<span class="hljs-keyword">const</span> total = <span class="hljs-title function_">add</span>(...nums); <span class="hljs-comment">// 报错</span></code></pre></div><p>上面示例中，变量<code>nums</code>的类型推断为<code>number[]</code>，导致使用扩展运算符<code>...</code>传入函数<code>add()</code>会报错，因为<code>add()</code>只能接受两个参数，而<code>...nums</code>并不能保证参数的个数。</p><p>事实上，对于固定参数个数的函数，如果传入的参数包含扩展运算符，那么扩展运算符只能用于元组。只有当函数定义使用了 rest 参数，扩展运算符才能用于数组。</p><p>解决方法就是使用<code>as const</code>断言，将数组变成元组。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>] <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span>;<span class="hljs-keyword">const</span> total = <span class="hljs-title function_">add</span>(...nums); <span class="hljs-comment">// 正确</span></code></pre></div><p>上面示例中，使用<code>as const</code>断言后，变量<code>nums</code>的类型会被推断为<code>readonly [1, 2]</code>，使用扩展运算符展开后，正好符合函数<code>add()</code>的参数类型。</p><p>Enum 成员也可以使用<code>as const</code>断言。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Foo</span> &#123;  X,  Y,&#125;<span class="hljs-keyword">let</span> e1 = <span class="hljs-title class_">Foo</span>.<span class="hljs-property">X</span>;            <span class="hljs-comment">// Foo</span><span class="hljs-keyword">let</span> e2 = <span class="hljs-title class_">Foo</span>.<span class="hljs-property">X</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span>;   <span class="hljs-comment">// Foo.X</span></code></pre></div><p>上面示例中，如果不使用<code>as const</code>断言，变量<code>e1</code>的类型被推断为整个 Enum 类型；使用了<code>as const</code>断言以后，变量<code>e2</code>的类型被推断为 Enum 的某个成员，这意味着它不能变更为其他成员。 </p><h3 id="4-非空断言"><a href="#4-非空断言" class="headerlink" title="4.非空断言"></a>4.非空断言</h3><p>空断言只有在打开编译选项<code>strictNullChecks</code>时才有意义。如果不打开这个选项，编译器就不会检查某个变量是否可能为<code>undefined</code>或<code>null</code>。</p><p>？可选 ！必须。 如果！强制解包错误会报错。</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>任何包含 import 或 export 语句的文件，就是一个模块（module）。相应地，如果文件不包含 export 语句，就是一个全局的脚本文件。</p><p>模块本身就是一个作用域，不属于全局作用域。模块内部的变量、函数、类只在内部可见，对于模块外部是不可见的。暴露给外部的接口，必须用 export 命令声明；如果其他文件要使用模块的接口，必须用 import 命令来输入。</p><p>如果一个文件不包含 export 语句，但是希望把它当作一个模块（即内部变量对外不可见），可以在脚本头部添加一行语句。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">export</span> &#123;&#125;;</code></pre></div><p>上面这行语句不产生任何实际作用，但会让当前文件被当作模块处理，所有它的代码都变成了内部代码。</p><h3 id="2-import-type-语句"><a href="#2-import-type-语句" class="headerlink" title="2. import type 语句"></a>2. import type 语句</h3><p>import 在一条语句中，可以同时输入类型和正常接口。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// a.ts</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> A &#123;  <span class="hljs-attr">foo</span>: <span class="hljs-built_in">string</span>;&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> a = <span class="hljs-number">123</span>;<span class="hljs-comment">// b.ts</span><span class="hljs-keyword">import</span> &#123; A, a &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./a&#x27;</span>;</code></pre></div><p>上面示例中，文件<code>a.ts</code>的 export 语句输出了一个类型<code>A</code>和一个正常接口<code>a</code>，另一个文件<code>b.ts</code>则在同一条语句中输入了类型和正常接口。</p><p>这样很不利于区分类型和正常接口，容易造成混淆。为了解决这个问题，TypeScript 引入了两个解决方法。</p><p>第一个方法是在 import 语句输入的类型前面加上<code>type</code>关键字。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-keyword">type</span> A, a &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./a&#x27;</span>;</code></pre></div><p>上面示例中，import 语句输入的类型<code>A</code>前面有<code>type</code>关键字，表示这是一个类型。</p><p>第二个方法是使用 import type 语句，这个语句只能输入类型，不能输入正常接口。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// 正确</span><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; A &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./a&#x27;</span>;<span class="hljs-comment">// 报错</span><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; a &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./a&#x27;</span>;</code></pre></div><p>import type 语句也可以输入默认类型。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">DefaultType</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;moduleA&#x27;</span>;</code></pre></div><p>import type 在一个名称空间下，输入所有类型的写法如下。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">TypeNS</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;moduleA&#x27;</span>;</code></pre></div><p>同样的，export 语句也有两种方法，表示输出的是类型。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> A = <span class="hljs-string">&#x27;a&#x27;</span>;<span class="hljs-keyword">type</span> B = <span class="hljs-string">&#x27;b&#x27;</span>;<span class="hljs-comment">// 方法一</span><span class="hljs-keyword">export</span> &#123;<span class="hljs-keyword">type</span> A, <span class="hljs-keyword">type</span> B&#125;;<span class="hljs-comment">// 方法二</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> &#123;A, B&#125;;</code></pre></div><p>上面示例中，方法一是使用<code>type</code>关键字作为前缀，表示输出的是类型；方法二是使用 export type 语句，表示整行输出的都是类型。</p><p>下面是 export type 将一个类作为类型输出的例子。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;  <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;  <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>;&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">Point</span> &#125;;</code></pre></div><p>上面示例中，由于使用了 export type 语句，输出的并不是 Point 这个类，而是 Point 代表的实例类型。输入时，只能作为类型输入。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">Point</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module&#x27;</span>;<span class="hljs-keyword">const</span> <span class="hljs-attr">p</span>:<span class="hljs-title class_">Point</span> = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> &#125;;</code></pre></div><p>上面示例中，<code>Point</code>只能作为类型输入，不能当作正常接口使用。</p><h3 id="3-模块定位"><a href="#3-模块定位" class="headerlink" title="3. 模块定位"></a>3. 模块定位</h3><p>模块定位（module resolution）指的是一种算法，用来确定 import 语句和 export 语句里面的模块文件位置。</p><div class="code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// 相对模块</span><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TypeA</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./a&#x27;</span>;<span class="hljs-comment">// 非相对模块</span><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;jquery&quot;</span>;</code></pre></div><p>上面示例中，TypeScript 怎么确定<code>./a</code>或<code>jquery</code>到底是指哪一个模块，具体位置在哪里，用到的算法就叫做“模块定位”。</p><p>编译参数<code>moduleResolution</code>，用来指定具体使用哪一种定位算法。常用的算法有两种：<code>Classic</code>和<code>Node</code>。</p><p>如果没有指定<code>moduleResolution</code>，它的默认值与编译参数<code>module</code>有关。<code>module</code>设为<code>commonjs</code>时（项目脚本采用 CommonJS 模块格式），<code>moduleResolution</code>的默认值为<code>Node</code>，即采用 Node.js 的模块定位算法。其他情况下（<code>module</code>设为 es2015、 esnext、amd, system, umd 等等），就采用<code>Classic</code>定位算法。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://wangdoc.com/typescript/">阮一峰</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
